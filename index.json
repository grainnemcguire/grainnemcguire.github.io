[{"authors":["admin"],"categories":null,"content":"I am a statistician and actuary, with a long-standing interest in using statistics in general insurance and more recently, I\u0026rsquo;ve used statistics and machine learning techniques in wider areas such as government and social sector analytics.\nMy original background was in statistical molecular genetics where I used statistical models to detect recombination in bacteria and viruses.\n","date":1535673600,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1535673600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a statistician and actuary, with a long-standing interest in using statistics in general insurance and more recently, I\u0026rsquo;ve used statistics and machine learning techniques in wider areas such as government and social sector analytics.\nMy original background was in statistical molecular genetics where I used statistical models to detect recombination in bacteria and viruses.","tags":null,"title":"Grainne McGuire","type":"authors"},{"authors":null,"categories":["Reserving"],"content":"\rThis post provides a worked example in R of fitting a GLM to some non-life claims reserving data.\rThe example and data are drawn from the CAS Monograph Stochastic Loss Reserving using Generalized Linear Models.\rHere we follow through the application of the cross-classified model from that monograph to the data (Chapter 3), and follow through with the additonal work to firstly simplify the model and secondly to improve the model fit through the use of some interaction terms (Chapter 7).\nIf you want to access the underlying Rnotebook directly, you may access it at:\n\r2019-11-07-traditional-style-reserving-using-glms.Rmd.\rThe data used is available in this csv file\r\rSetup\rBefore we begin, we first set up the R session by loading in the various packages that we need.\n\rhere: I first heard about here from reading Jenny Bryan’s article on it and have been a fan of here and the R project structure ever since. It really helps with portability of code.\n\rBasically it allows you to use relative rather than absolute file paths.\rIf you want to run this notebook and don’t want to use here then all you need to do is put an appropriate pathname in for loading in the data from a CSV file.\rLocation is not used anywhere else.\r\rdata.table I really like data.table - its power, speed and terseness. At some point though I may replace the data.table code with base R to reduce dependencies. For now though, there isn’t a huge amount of data.table code.\n\rEven if you don’t like data.table syntax, the fread and fwrite functions can be very useful for reading and writing CSV files.\r\rggplot2: create nice graphs easily\n\rviridis nice colour palettes that are tested for common forms of colour-blindness\rcowplot - an easy way of grouping graphs into a single figure\r\rmagrittr Use the %\u0026gt;% pipe to reduce nested parentheses\n\rknitr The notebook uses kable from the knitr package. If you’re using RStudio to run this code in notebook format, then you should already have it. Otherwise you can install it, or you can simply replace all the kable commands with print statements.\n\r\rIf you don’t have any of these packages you will need to install them via install.packages or, if using RStudio, via the Install buttom in the packages pane.\n\rlibrary(here)\rlibrary(data.table)\rlibrary(ggplot2)\rlibrary(viridis)\rlibrary(cowplot)\rlibrary(magrittr)\r# I have elected not to attach knitr, so we need to use knitr::kable() below\roptions(scipen = 99) # get rid of scientific notation\r\r\rData\rThe data are presented in Section 1.3 of the monograph. Ultimately the data were sourced from the Meyers and Shi (2011) database, and are the workers compensation triangle of the New Jersey Manufacturers Group.\nFor ease of use, I have created a CSV file with the data which is loaded in this code chunk. As noted above I use relative path names with the here package. If you don’t want to have a setup that works with here, just ensure the full pathname to the file is included in the fread statement below.\nOnce the data is loaded in, have a look at the start of it.\nmsdata \u0026lt;- data.table::fread(here::here(\u0026quot;data/2019-11-07-glms_meyershi.csv\u0026quot;))\r# if needed replace here::here(\u0026quot;data/glms_meyershi.csv\u0026quot;) with\r# the correct path and filename of where you put the data\rsetDT(msdata)\rprint(msdata[1:6,])\r## acc_year dev_year cumulative incremental\r## 1: 1 1 41821 41821\r## 2: 1 2 76550 34729\r## 3: 1 3 96697 20147\r## 4: 1 4 112662 15965\r## 5: 1 5 123947 11285\r## 6: 1 6 129871 5924\rSo we have four columns:\n\racc_year: accident year, numbered from 1 to 10\n\rdev_year: development year, also numbered from 1 to 10\n\rcumulative: cumulative payments to date\n\rincremental: incremental payments for that accident year, development year combination.\n\r\rLet’s look at the data visually.\nFirst we plot the cumulative amounts in each accident year\nggplot(data=msdata, aes(x=dev_year, y=cumulative, colour=as.factor(acc_year))) +\rgeom_line(size=1) +\rscale_color_viridis_d(begin=0.9, end=0) + ggtitle(\u0026quot;Cumulative amounts by development year\u0026quot;) + theme_bw() + theme(legend.position = \u0026quot;right\u0026quot;, legend.title=element_blank(), legend.text=element_text(size=8))\rNow look at the incremental amounts\nggplot(data=msdata, aes(x=dev_year, y=incremental, colour=as.factor(acc_year))) +\rgeom_line(size=1) +\rscale_color_viridis_d(begin=0.9, end=0) + ggtitle(\u0026quot;Incremental amounts by development year\u0026quot;) + theme_bw() + theme(legend.position = \u0026quot;right\u0026quot;, legend.title=element_blank(), legend.text=element_text(size=8))\rThe data look quite well behaved - each year seems to have a similar development pattern.\n\rModelling\rInitial model\rThe first model applied here is the Over-dispersed Poisson (ODP) cross classified (cc) model (Sections 3.3.2 and 3.3.3 of the monograph).\rThis model has been shown to give the same results as the chain ladder algorithm.\nTo apply the model, we will use the glm function from the base R stats package. The cross-classified model requires separate levels for each of accident and development year so we first make a factor version of these variates.\nmsdata[, acc_year_factor := as.factor(acc_year)\r][, dev_year_factor := as.factor(dev_year)\r][, cal_year := acc_year + dev_year - 1]\rNow we fit the model and look at the results via summary.\n\rThe family is the quasipoisson - this is how we fit an ODP model with glm.\rThe link is log\rThe formula is simply “incremental ~ 0 + acc_year_factor + dev_year_factor”\r\rThe 0 tells glm to fit a model without an intercept\rWe choose to do that here because then we can more easily compare the results to those in the monograph.\r\r\rglm_fit1 \u0026lt;- glm(data = msdata, family = quasipoisson(link = \u0026quot;log\u0026quot;),\rformula = \u0026quot;incremental ~ 0 + acc_year_factor + dev_year_factor\u0026quot;)\rsummary(glm_fit1)\r## ## Call:\r## glm(formula = \u0026quot;incremental ~ 0 + acc_year_factor + dev_year_factor\u0026quot;, ## family = quasipoisson(link = \u0026quot;log\u0026quot;), data = msdata)\r## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -21.493 -5.534 0.000 5.136 21.059 ## ## Coefficients:\r## Estimate Std. Error t value Pr(\u0026gt;|t|) ## acc_year_factor1 10.65676 0.03164 336.794 \u0026lt; 0.0000000000000002 ***\r## acc_year_factor2 10.79533 0.02994 360.507 \u0026lt; 0.0000000000000002 ***\r## acc_year_factor3 10.89919 0.02887 377.465 \u0026lt; 0.0000000000000002 ***\r## acc_year_factor4 10.98904 0.02808 391.326 \u0026lt; 0.0000000000000002 ***\r## acc_year_factor5 11.03883 0.02783 396.654 \u0026lt; 0.0000000000000002 ***\r## acc_year_factor6 11.01590 0.02855 385.867 \u0026lt; 0.0000000000000002 ***\r## acc_year_factor7 11.00808 0.02945 373.734 \u0026lt; 0.0000000000000002 ***\r## acc_year_factor8 10.89050 0.03266 333.463 \u0026lt; 0.0000000000000002 ***\r## acc_year_factor9 10.83613 0.03669 295.348 \u0026lt; 0.0000000000000002 ***\r## acc_year_factor10 10.69108 0.05104 209.454 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor2 -0.20466 0.02276 -8.993 0.00000000009767316 ***\r## dev_year_factor3 -0.74741 0.02819 -26.512 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor4 -1.01667 0.03284 -30.954 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor5 -1.45160 0.04214 -34.446 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor6 -1.83254 0.05471 -33.495 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor7 -2.14026 0.07150 -29.933 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor8 -2.34827 0.09312 -25.218 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor9 -2.51317 0.12673 -19.831 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor10 -2.66449 0.19930 -13.369 0.00000000000000158 ***\r## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\r## ## (Dispersion parameter for quasipoisson family taken to be 114.5364)\r## ## Null deviance: 27479374.2 on 55 degrees of freedom\r## Residual deviance: 4128.1 on 36 degrees of freedom\r## AIC: NA\r## ## Number of Fisher Scoring iterations: 3\rWe now extract the coefficient table in a more convenient way and append it onto the glm_fit1 object for later use.\nWe will also print the table again in a nicer form to make it easier to compare to the first 3 columns of Table 3-5 of the monograph.\n\rIf you do this, you should see that the results match.\r\r# save the data for later use\rglm_fit1$coeff_table \u0026lt;- data.table(parameter = names(glm_fit1$coefficients), coeff_glm_fit1 = glm_fit1$coefficients)\r# print out the table so we can compare against Table 3-5.\rglm_fit1$coeff_table %\u0026gt;% knitr::kable(digits=c(0,3))\r\r\rparameter\rcoeff_glm_fit1\r\r\r\racc_year_factor1\r10.657\r\racc_year_factor2\r10.795\r\racc_year_factor3\r10.899\r\racc_year_factor4\r10.989\r\racc_year_factor5\r11.039\r\racc_year_factor6\r11.016\r\racc_year_factor7\r11.008\r\racc_year_factor8\r10.891\r\racc_year_factor9\r10.836\r\racc_year_factor10\r10.691\r\rdev_year_factor2\r-0.205\r\rdev_year_factor3\r-0.747\r\rdev_year_factor4\r-1.017\r\rdev_year_factor5\r-1.452\r\rdev_year_factor6\r-1.833\r\rdev_year_factor7\r-2.140\r\rdev_year_factor8\r-2.348\r\rdev_year_factor9\r-2.513\r\rdev_year_factor10\r-2.664\r\r\r\r\rLoss reserve\r\rWe will calculate the loss reserve for this model\rThis should give the same answers as the chain ladder algorithm\r\r# first make the lower triangle data set\ray \u0026lt;- NULL\rdy \u0026lt;- NULL\rfor(i in 2:10){\ray \u0026lt;- c(ay, rep(i, times=(i-1)))\rdy \u0026lt;- c(dy, (10-i+2):10)\r}\rfutdata \u0026lt;- data.table(acc_year = ay, dev_year = dy)\r# make factors\rfutdata[, cal_year := acc_year + dev_year\r][, acc_year_factor := as.factor(acc_year)\r][, dev_year_factor := as.factor(dev_year)]\r# make the prediction and sum by acc_year\rx \u0026lt;- predict(glm_fit1, newdata = futdata, type=\u0026quot;response\u0026quot;)\rfutdata[, incremental := x]\rocl_year \u0026lt;- futdata[, lapply(.SD, sum), .SDcols=c(\u0026quot;incremental\u0026quot;), by=\u0026quot;acc_year\u0026quot;]\rocl_year %\u0026gt;% knitr::kable(digits=c(0, 0))\r\r\racc_year\rincremental\r\r\r\r2\r3398\r\r3\r8155\r\r4\r14579\r\r5\r22645\r\r6\r31865\r\r7\r45753\r\r8\r60093\r\r9\r80983\r\r10\r105874\r\r\r\r\rAs expected, this matches the results in Table 3-2 of the monograph.\r\r\rModel diagnostics\rIt’s always important to check that a model fits the data well, so here we look at the following:\n\rResidual Scatterplots\r\rby linear predictor\rby accident, development and calendar years\r\rHeat map of actual vs fitted\r\rIn this we get the actual/fitted ratio in each (acc, dev) cell [subject to lower and upper bounds of (0.5, 2)] and then plot the colour-coded triangle of the actual/fitted values\rheat maps are helpful to check for model fit and may help to identify missing interactions.\r\r\rNote on residuals with glm\n\rThe residuals in a glm object accessed with $residuals are residuals used in the model fitting algorithm.\rFor diagnostic purposes, the standardised deviance residuals are usually preferable to work with.\r\rThese are the signed square roots of the contribution of the ith observation to the deviance, divided by hat matrix values.\rThe stats::rstandard() function may be used with glm objects to extract the standardised deviance residuals.\r\r\r\nGenerating the diagnostics\n\rFirst we prepare the data by adding the fitted values and residuals.\r\rBecause this model has a lot of parameters, there are two observations where the fitted is exactly equal to the actual – (acc_year=1, dev_year=10) and (acc_year=10, dev_year=0).\rThis is because these observations have a unique parameter.\rThe deviance calculations below return NaN (not a number) for these points, but the residual should really be 0 so this adjustment is made manually.\r\rAlso add actual/fitted ratios and the log of these (restricted to the range [log(0.5), log(2)]) - these will be used for a heatmap later.\r\rThe restricted range is used to generate easier to read shadings in the heat-map, while the conversion to log means that the shading scales will be similar intensity for \\(x\\)% and \\(1/x\\) %\r\r\rmsdata[, residuals1 := rstandard(glm_fit1)\r][, fitted1 := glm_fit1$fitted.values\r][, linear_predictor1 := log(fitted1)\r][, AvsF1 := incremental / fitted1\r][, AvsF_restricted1 := log(pmax(0.5, pmin(2,AvsF1)))]\r# check for NaN residuals\rmsdata[is.nan(residuals1),]\r## acc_year dev_year cumulative incremental acc_year_factor dev_year_factor\r## 1: 1 10 144781 2958 1 10\r## 2: 10 1 43962 43962 10 1\r## cal_year residuals1 fitted1 linear_predictor1 AvsF1\r## 1: 10 NaN 2958 7.992269 1\r## 2: 10 NaN 43962 10.691081 1\r## AvsF_restricted1\r## 1: -0.0000000000000019984014\r## 2: 0.0000000000000008881784\r# these occur where we expect them so so replace with 0\rmsdata[is.nan(residuals1), residuals1 := 0]\rLook at the first 10 rows of msdata\nhead(msdata, 10)\r## acc_year dev_year cumulative incremental acc_year_factor dev_year_factor\r## 1: 1 1 41821 41821 1 1\r## 2: 1 2 76550 34729 1 2\r## 3: 1 3 96697 20147 1 3\r## 4: 1 4 112662 15965 1 4\r## 5: 1 5 123947 11285 1 5\r## 6: 1 6 129871 5924 1 6\r## 7: 1 7 134646 4775 1 7\r## 8: 1 8 138388 3742 1 8\r## 9: 1 9 141823 3435 1 9\r## 10: 1 10 144781 2958 1 10\r## cal_year residuals1 fitted1 linear_predictor1 AvsF1\r## 1: 1 -0.37704981 42478.725 10.656759 0.9845164\r## 2: 2 0.06821815 34616.808 10.452095 1.0032410\r## 3: 3 0.02211088 20117.514 9.909346 1.0014657\r## 4: 4 0.50192703 15368.757 9.640092 1.0387958\r## 5: 5 1.36344235 9948.355 9.205163 1.1343584\r## 6: 6 -1.13119533 6796.876 8.824218 0.8715769\r## 7: 7 -0.33754581 4996.553 8.516503 0.9556589\r## 8: 8 -0.56680264 4058.159 8.308485 0.9220929\r## 9: 9 -0.01379476 3441.253 8.143591 0.9981829\r## 10: 10 0.00000000 2958.000 7.992269 1.0000000\r## AvsF_restricted1\r## 1: -0.015604749951508145936\r## 2: 0.003235741327323749146\r## 3: 0.001464610789021573859\r## 4: 0.038062125103388820546\r## 5: 0.126067171138098593763\r## 6: -0.137451186377785167236\r## 7: -0.045354245283910396558\r## 8: -0.081109303248732236846\r## 9: -0.001818723883641001036\r## 10: -0.000000000000001998401\rNow let’s look at the residual scatterplots - here I use the cowplot package to combine all 4 graphs into one plot.\nIn the linear predictor scatterplot, the points are colour coded so that the lighter points belong to the earlier development years, and the darker points belong to the later ones.\np1 \u0026lt;- ggplot(data=msdata, aes(x=linear_predictor1, y=residuals1, colour=dev_year)) +\rgeom_point(size=2) +\rscale_colour_viridis(begin=0.9, end=0) +\rtheme_bw() + theme(legend.position = \u0026quot;none\u0026quot;) +\rggtitle(\u0026quot;Linear predictor\u0026quot;)\rp2 \u0026lt;- ggplot(data=msdata, aes(x=acc_year, y=residuals1)) +\rgeom_point(size=2, colour=\u0026quot;#2d708eff\u0026quot;) +\rtheme_bw() + ggtitle(\u0026quot;Accident year\u0026quot;)\rp3 \u0026lt;- ggplot(data=msdata, aes(x=dev_year, y=residuals1)) +\rgeom_point(size=2, colour=\u0026quot;#2d708eff\u0026quot;) +\rtheme_bw() + ggtitle(\u0026quot;Development year\u0026quot;)\rp4 \u0026lt;- ggplot(data=msdata, aes(x=cal_year, y=residuals1)) +\rgeom_point(size=2, colour=\u0026quot;#2d708eff\u0026quot;) +\rtheme_bw() + ggtitle(\u0026quot;Calendar year\u0026quot;)\rp \u0026lt;- plot_grid(p1, p2, p3, p4, nrow=2, rel_widths = c(1,1,1,1))\rp\rNow construct and draw the heat map. Note that the colours are:\n\rblue (A/F = 50%)\rwhite (A/F = 100%)\rred (A/F = 200%)\r\r# heatmap code\r# to get the correct shading I\u0026#39;ve plotted the log of the restricted A/F values\rp_hm \u0026lt;- ggplot(data=msdata, aes(x=dev_year, y=acc_year)) + geom_tile(aes(fill = AvsF_restricted1))+scale_y_reverse()+\rscale_fill_gradient2(name=\u0026quot;AvF_min\u0026quot;, low=\u0026quot;royalblue\u0026quot;, mid=\u0026quot;white\u0026quot;, high=\u0026quot;red\u0026quot;, midpoint=0, space=\u0026quot;Lab\u0026quot;, na.value=\u0026quot;grey50\u0026quot;, guide=\u0026quot;colourbar\u0026quot;)+\rlabs(x=\u0026quot;Development year\u0026quot;, y=\u0026quot;Accident year\u0026quot;)+\rtheme(legend.position = \u0026quot;none\u0026quot;)+\rtheme(axis.title.x = element_text(size=8), axis.text.x = element_text(size=7))+\rtheme(axis.title.y = element_text(size=8), axis.text.y = element_text(size=7))+\rtheme(panel.background = element_rect(fill = \u0026quot;grey\u0026quot;, colour = \u0026quot;grey\u0026quot;, size = 2, linetype = \u0026quot;solid\u0026quot;),\rpanel.grid = element_line(colour=\u0026quot;grey\u0026quot;)) + NULL\rprint(p_hm)\r\r\rRefining the model\rWe could stop here - and just use the results from this model, which match those produced by the chain ladder. The diagnostics suggest that the model fits quite well.\rHowever can we:\n\ridentify simplifications to the model to make it more parsinomious?\ridentify any areas of poorer fit than may suggest missing model terms including interactions?\r\rSimplifying the model\rFirst we consider if we can use a parametric shape for the accident and development year parameters.\n\rAccident year\rFirst plot the accident year parameters.\n# extract the data\rdt_acc_year \u0026lt;- glm_fit1$coeff_table[grepl(\u0026quot;acc_year\u0026quot;, parameter), ][, acc_year := as.integer(gsub(\u0026quot;acc_year_factor\u0026quot;, \u0026quot;\u0026quot;, parameter))]\r# plot\rggplot(data=dt_acc_year, aes(x=acc_year, y=coeff_glm_fit1)) +\rgeom_line(size=2, colour=\u0026quot;#440154ff\u0026quot;) +\rgeom_point(size=4, colour=\u0026quot;#440154ff\u0026quot;) + theme_bw() + ggtitle(\u0026quot;Accident year parameters\u0026quot;)\r\rNote that their shape closely resembles that of a parabola.\rThis suggests that we can replace the 10 accident year parameters by\r\rthe overall intercept\ran acc_year term\ran acc_year squarted term\r\rSo refit the model on this basis.\r\rDrop the 0 from the glm_fit1 formula to allow the model to have an intecept\rReplace the acc_year_factor term with the parabola terms.\r\r\r# add an x and x^2 term\rmsdata[, acc_year_2 := acc_year^2]\rglm_fit2 \u0026lt;- glm(data = msdata, family = quasipoisson(link = \u0026quot;log\u0026quot;),\rformula = \u0026quot;incremental ~ acc_year + acc_year_2 + dev_year_factor\u0026quot;)\rsummary(glm_fit2)\r## ## Call:\r## glm(formula = \u0026quot;incremental ~ acc_year + acc_year_2 + dev_year_factor\u0026quot;, ## family = quasipoisson(link = \u0026quot;log\u0026quot;), data = msdata)\r## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -28.5517 -5.1747 0.2691 4.5827 24.5421 ## ## Coefficients:\r## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 10.470978 0.034414 304.264 \u0026lt; 0.0000000000000002 ***\r## acc_year 0.200075 0.014219 14.071 \u0026lt; 0.0000000000000002 ***\r## acc_year_2 -0.017907 0.001356 -13.210 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor2 -0.205555 0.021276 -9.661 0.00000000000243 ***\r## dev_year_factor3 -0.750108 0.026492 -28.314 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor4 -1.014806 0.030982 -32.755 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor5 -1.451958 0.039797 -36.484 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor6 -1.830488 0.051662 -35.432 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor7 -2.142154 0.067504 -31.734 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor8 -2.352674 0.087924 -26.758 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor9 -2.513722 0.119637 -21.011 \u0026lt; 0.0000000000000002 ***\r## dev_year_factor10 -2.660878 0.187820 -14.167 \u0026lt; 0.0000000000000002 ***\r## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\r## ## (Dispersion parameter for quasipoisson family taken to be 102.5776)\r## ## Null deviance: 750824 on 54 degrees of freedom\r## Residual deviance: 4427 on 43 degrees of freedom\r## AIC: NA\r## ## Number of Fisher Scoring iterations: 3\rWe see in the coefficient table part of the summary that the two acc_year terms are highly significant.\n\nNow extract the coefficients and compare the previous and current fits.\n\rRemember that the intercept must be included in these calculations.\rAgain, save the coefficient table in this extracted form with the glm_fit2 object for later use.\r\r# extract the coefficient table\rglm_fit2$coeff_table \u0026lt;- data.table(parameter = names(glm_fit2$coefficients), coeff_glm_fit2 = glm_fit2$coefficients)\rprint(glm_fit2$coeff_table)\r## parameter coeff_glm_fit2\r## 1: (Intercept) 10.47097818\r## 2: acc_year 0.20007497\r## 3: acc_year_2 -0.01790686\r## 4: dev_year_factor2 -0.20555514\r## 5: dev_year_factor3 -0.75010823\r## 6: dev_year_factor4 -1.01480620\r## 7: dev_year_factor5 -1.45195754\r## 8: dev_year_factor6 -1.83048769\r## 9: dev_year_factor7 -2.14215388\r## 10: dev_year_factor8 -2.35267361\r## 11: dev_year_factor9 -2.51372160\r## 12: dev_year_factor10 -2.66087765\rNow compare the past and current parameter estimates for accident year.\n# pull out the acc year coefficinents only\rdt_acc_year[, coeff_glm_fit2 := glm_fit2$coeff_table[parameter == \u0026quot;acc_year\u0026quot;, coeff_glm_fit2]*acc_year + glm_fit2$coeff_table[parameter == \u0026quot;acc_year_2\u0026quot;, coeff_glm_fit2]*acc_year^2 + glm_fit2$coeff_table[parameter == \u0026quot;(Intercept)\u0026quot;, coeff_glm_fit2]]\r# make long for ggplot\rdt_acc_year_plot \u0026lt;- melt(dt_acc_year, id.vars = \u0026quot;acc_year\u0026quot;, measure.vars = c(\u0026quot;coeff_glm_fit1\u0026quot;, \u0026quot;coeff_glm_fit2\u0026quot;), variable.name=\u0026quot;model\u0026quot;, value = \u0026quot;estimate\u0026quot;)\r# remove the coeff_ from the model names\rdt_acc_year_plot[, model := gsub(\u0026quot;coeff_\u0026quot;, \u0026quot;\u0026quot;, model, fixed=TRUE)]\rggplot(data=dt_acc_year_plot, aes(x=acc_year, y=estimate, colour=model)) +\rgeom_line(size=2) +\rgeom_point(size=4) +\rscale_colour_viridis_d(begin=0, end=0.5) + theme_bw() + ggtitle(\u0026quot;Accident year parameters\u0026quot;)\r\rThis looks very good - the fit is very similar, but we have 7 fewer parameters.\r\r\rDevelopment year\r\rNow we do the same thing for development year\rNote that the glm_fit2 model (and the glm_fit1 model too) do not have a parameter for dev_year = 1 as this is the base level.\r\rThis means that the parameter is really 0, so we must remember to include this.\r\r\r# extract the data\rdt_dev_year \u0026lt;- glm_fit2$coeff_table[grepl(\u0026quot;dev_year\u0026quot;, parameter), ][, dev_year := as.integer(gsub(\u0026quot;dev_year_factor\u0026quot;, \u0026quot;\u0026quot;, parameter))][] # known data.table printing bug\r# add year 1\rdt_dev_year \u0026lt;- rbind(dt_dev_year, data.table(parameter=\u0026quot;dev_year_factor1\u0026quot;, coeff_glm_fit2=0, dev_year=1))\rsetorder(dt_dev_year, dev_year)\r# plot\rggplot(data=dt_dev_year, aes(x=dev_year, y=coeff_glm_fit2)) +\rgeom_line(size=2, colour=\u0026quot;#440154ff\u0026quot;) +\rgeom_point(size=4, colour=\u0026quot;#440154ff\u0026quot;) +\rtheme_bw() +\rggtitle(\u0026quot;Development year parameters\u0026quot;)\r\rLooking at this plot, it appears that a straight line would fit quite well\rThis fit would be improved by allowing the straight line to bend (have a knot) at dev_year = 7\r\rSo let’s try this below\rnote we actually fit dev_year - 1 rather than dev_year\r\rthis means that the parameter estimate at dev_year = 1 is 0, just as it is in the glm_fit2 model, so it makes the results comparable\rif we fit dev_year, then the parameter estimate at dev_year=1 would be non-zero, so the two fits would be shifted relative to each other and we would need to adjust for that.\r\r\r\r# add dev-1 and dev-7 terms\rmsdata[, dev_year_m1 := dev_year - 1]\rmsdata[, dev_year_ge_7 := pmax(dev_year-7.5, 0)]\r# fit the model\rglm_fit3 \u0026lt;- glm(data = msdata, family = quasipoisson(link = \u0026quot;log\u0026quot;),\rformula = \u0026quot;incremental ~ acc_year + acc_year_2 + dev_year_m1 + dev_year_ge_7\u0026quot;)\r# extract and save the coefficient table\rglm_fit3$coeff_table \u0026lt;- data.table(parameter = names(glm_fit3$coefficients), coeff_glm_fit3 = glm_fit3$coefficients)\r# display a summary of the model\rsummary(glm_fit3)\r## ## Call:\r## glm(formula = \u0026quot;incremental ~ acc_year + acc_year_2 + dev_year_m1 + dev_year_ge_7\u0026quot;, ## family = quasipoisson(link = \u0026quot;log\u0026quot;), data = msdata)\r## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -25.301 -9.262 -2.080 5.893 42.841 ## ## Coefficients:\r## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 10.509475 0.052096 201.734 \u0026lt; 0.0000000000000002 ***\r## acc_year 0.204224 0.021608 9.451 0.00000000000104 ***\r## acc_year_2 -0.018295 0.002058 -8.891 0.00000000000719 ***\r## dev_year_m1 -0.364073 0.008845 -41.160 \u0026lt; 0.0000000000000002 ***\r## dev_year_ge_7 0.238860 0.088426 2.701 0.00941 ** ## ---\r## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\r## ## (Dispersion parameter for quasipoisson family taken to be 242.0614)\r## ## Null deviance: 750824 on 54 degrees of freedom\r## Residual deviance: 11879 on 50 degrees of freedom\r## AIC: NA\r## ## Number of Fisher Scoring iterations: 4\r\rAssuming the fit is satisfactory, our original model with 19 parmaeters has now been simplified to 5 parameters - much more parsimonious and robust.\rLet’s check the fit by dev_year to see.\r\r# get the dev_year fit under the new model and add to the data.table containing the factor level parameters\rp1 \u0026lt;- glm_fit3$coeff_table[parameter == \u0026quot;dev_year_m1\u0026quot;, coeff_glm_fit3]\rp2 \u0026lt;- glm_fit3$coeff_table[parameter == \u0026quot;dev_year_ge_7\u0026quot;, coeff_glm_fit3]\rdt_dev_year[, coeff_glm_fit3 := p1*(dev_year-1) + p2*pmax(0, dev_year-7.5) ]\r# make long for ggplot\rdt_dev_year_plot \u0026lt;- melt(dt_dev_year, id.vars = \u0026quot;dev_year\u0026quot;, measure.vars = c(\u0026quot;coeff_glm_fit2\u0026quot;, \u0026quot;coeff_glm_fit3\u0026quot;), variable.name=\u0026quot;model\u0026quot;, value = \u0026quot;estimate\u0026quot;)\r# remove the coeff_ from the model names\rdt_dev_year_plot[, model := gsub(\u0026quot;coeff_\u0026quot;, \u0026quot;\u0026quot;, model, fixed=TRUE)]\rggplot(data=dt_dev_year_plot, aes(x=dev_year, y=estimate, colour=model)) +\rgeom_line(size=2) +\rgeom_point(size=4) +\rscale_colour_viridis_d(begin=0, end=0.5) +\rtheme_bw() +\rggtitle(\u0026quot;Accident year parameters\u0026quot;)\r\rThis looks good.\rHowever dev_year = 2 is a bit underfit in the latest model, so we can add something to improve this fit\rSo refit and replot.\r\rmsdata[, dev_year_eq_2 := as.integer(dev_year == 2)]\rglm_fit4 \u0026lt;- glm(data = msdata, family = quasipoisson(link = \u0026quot;log\u0026quot;),\rformula = \u0026quot;incremental ~ acc_year + acc_year_2 + dev_year_m1 + dev_year_ge_7 + dev_year_eq_2\u0026quot;)\rglm_fit4$coeff_table \u0026lt;- data.table(parameter = names(glm_fit4$coefficients), coeff_glm_fit4 = glm_fit4$coefficients)\rp1 \u0026lt;- glm_fit4$coeff_table[parameter == \u0026quot;dev_year_m1\u0026quot;, coeff_glm_fit4]\rp2 \u0026lt;- glm_fit4$coeff_table[parameter == \u0026quot;dev_year_ge_7\u0026quot;, coeff_glm_fit4]\rp3 \u0026lt;- glm_fit4$coeff_table[parameter == \u0026quot;dev_year_eq_2\u0026quot;, coeff_glm_fit4]\rdt_dev_year[, coeff_glm_fit4 := p1*(dev_year-1) + p2*pmax(0, dev_year-7.5) + p3*(dev_year == 2) ]\r# make long for ggplot\rdt_dev_year_plot \u0026lt;- melt(dt_dev_year, id.vars = \u0026quot;dev_year\u0026quot;, measure.vars = c(\u0026quot;coeff_glm_fit2\u0026quot;, \u0026quot;coeff_glm_fit4\u0026quot;), variable.name=\u0026quot;model\u0026quot;, value = \u0026quot;estimate\u0026quot;)\r# remove the coeff_ from the model names\rdt_dev_year_plot[, model := gsub(\u0026quot;coeff_\u0026quot;, \u0026quot;\u0026quot;, model, fixed=TRUE)]\rggplot(data=dt_dev_year_plot, aes(x=dev_year, y=estimate, colour=model)) +\rgeom_line(size=2) +\rgeom_point(size=4) +\rscale_colour_viridis_d(begin=0, end=0.5) +\rtheme_bw() +\rggtitle(\u0026quot;Accident year parameters\u0026quot;)\r\rLooks good!\r\r\rIdentifying missing structure\r\rThe second part of the model refining process involves checking for missing structure.\rLet’s have a better look at the heat map.\r\rmsdata[, residuals4 := rstandard(glm_fit4)\r][, fitted4 := glm_fit4$fitted.values\r][, linear_predictor4 := log(fitted4)\r][, AvsF4 := incremental / fitted4\r][, AvsF_restricted4 := log(pmax(0.5, pmin(2,AvsF4)))]\rp_hm \u0026lt;- ggplot(data=msdata, aes(x=dev_year, y=acc_year)) + geom_tile(aes(fill = AvsF_restricted4))+scale_y_reverse()+\rscale_fill_gradient2(name=\u0026quot;AvF_min\u0026quot;, low=\u0026quot;royalblue\u0026quot;, mid=\u0026quot;white\u0026quot;, high=\u0026quot;red\u0026quot;, midpoint=0, space=\u0026quot;Lab\u0026quot;, na.value=\u0026quot;grey50\u0026quot;, guide=\u0026quot;colourbar\u0026quot;)+\rlabs(x=\u0026quot;Development year\u0026quot;, y=\u0026quot;Accident year\u0026quot;)+\rtheme(legend.position = \u0026quot;none\u0026quot;)+\rtheme(axis.title.x = element_text(size=8), axis.text.x = element_text(size=7))+\rtheme(axis.title.y = element_text(size=8), axis.text.y = element_text(size=7))+\rtheme(panel.background = element_rect(fill = \u0026quot;grey\u0026quot;, colour = \u0026quot;grey\u0026quot;, size = 2, linetype = \u0026quot;solid\u0026quot;),\rpanel.grid = element_line(colour=\u0026quot;grey\u0026quot;)) + NULL\rprint(p_hm)\rLet’s look at the heatmap again, with some annotations\np_hm + annotate(geom=\u0026quot;rect\u0026quot;, xmin= 0.5, xmax=1.5, ymin=0.5, ymax=6.5, colour=\u0026quot;darkblue\u0026quot;, alpha=0.1, size=1.5) +\rannotate(geom=\u0026quot;rect\u0026quot;, xmin= 0.5, xmax=1.5, ymin=6.5, ymax=10.5, colour=\u0026quot;darkred\u0026quot;, alpha=0.1, size=1.5) +\rannotate(geom=\u0026quot;rect\u0026quot;, xmin= 1.5, xmax=2.5, ymin=0.5, ymax=6.5, colour=\u0026quot;darkred\u0026quot;, alpha=0.1, size=1.5) +\rannotate(geom=\u0026quot;rect\u0026quot;, xmin= 1.5, xmax=2.5, ymin=6.5, ymax=9.5, colour=\u0026quot;darkblue\u0026quot;, alpha=0.1, size=1.5) +\rannotate(geom=\u0026quot;segment\u0026quot;, x=3, xend=3, y=1, yend=8, arrow=arrow(), colour=\u0026quot;darkblue\u0026quot;, size=2) +\rannotate(geom=\u0026quot;rect\u0026quot;, xmin= 3.5, xmax=4.5, ymin=0.5, ymax=7.5, colour=\u0026quot;darkred\u0026quot;, alpha=0.1, size=1.5) \rWe see:\n\rdevelopment year 1, a distinct area of blue in the earlier accident years (A \u0026lt; F), followed by red (A \u0026gt; F)\rdevelopment year 2, a distinct area of red in the earlier accident years (A \u0026gt; F), followed by blue (A \u0026lt; F)\rdevelopment year 3, a possible progression from red to blue with increasing accident year (F increasing relative to A)\rdevelopment year 4, nearly all red (A \u0026gt; F)\r\rThis suggests the payment pattern has altered and can be accommodated by (mostly) interaction terms within the GLM. Consider adding the following terms:\n\r(development year = 1) * (accident year is between 1 and 6)\r(development year = 2) * (accident year is between 1 and 6)\r(development year = 3) * (accident year linear trend)\r(development year = 4)\r\rSo, let’s refit the model with terms to capture these and have a look at the heat map again\n# add the new terms\rmsdata[, dev_year_eq_1 := as.integer(dev_year == 1)]\rmsdata[, dev_year_eq_3 := as.integer(dev_year == 3)]\rmsdata[, dev_year_eq_4 := as.integer(dev_year == 4)]\rmsdata[, acc_year_1_6 := as.integer(acc_year \u0026gt;= 1 \u0026amp; acc_year \u0026lt;= 6)]\rglm_fit5 \u0026lt;- glm(data = msdata, family = quasipoisson(link = \u0026quot;log\u0026quot;),\rformula = \u0026quot;incremental ~ acc_year + acc_year_2 + dev_year_m1 + dev_year_ge_7 + dev_year_eq_2 + dev_year_eq_4 +\rdev_year_eq_1:acc_year_1_6 + dev_year_eq_2:acc_year_1_6 + dev_year_eq_3:acc_year \u0026quot;)\rglm_fit5$coeff_table \u0026lt;- data.table(parameter = names(glm_fit5$coefficients), coeff_glm_fit5 = glm_fit5$coefficients)\r# print the coefficient table\rglm_fit5$coeff_table %\u0026gt;% knitr::kable(digits=c(0, 4))\r\r\rparameter\rcoeff_glm_fit5\r\r\r\r(Intercept)\r10.4904\r\racc_year\r0.2066\r\racc_year_2\r-0.0183\r\rdev_year_m1\r-0.3685\r\rdev_year_ge_7\r0.2720\r\rdev_year_eq_2\r0.0375\r\rdev_year_eq_4\r0.0528\r\rdev_year_eq_1:acc_year_1_6\r-0.0671\r\rdev_year_eq_2:acc_year_1_6\r0.1273\r\racc_year:dev_year_eq_3\r-0.0113\r\r\r\r\rThis model should match that displayed in Table 7-5 of the monograph - and indeed it does (some very minor differences in parameter values - the model in the monograph was fitted in SAS).\n\rLook at the heat map again with annotations - has the model resolved the identified issues?\n\r\r# attach fitteds and residuals\rmsdata[, residuals5 := rstandard(glm_fit5)\r][, fitted5 := glm_fit5$fitted.values\r][, linear_predictor5 := log(fitted5)\r][, AvsF5 := incremental / fitted5\r][, AvsF_restricted5 := log(pmax(0.5, pmin(2,AvsF5)))]\rp_hm \u0026lt;- ggplot(data=msdata, aes(x=dev_year, y=acc_year)) + geom_tile(aes(fill = AvsF_restricted5))+scale_y_reverse()+\rscale_fill_gradient2(name=\u0026quot;AvF_min\u0026quot;, low=\u0026quot;royalblue\u0026quot;, mid=\u0026quot;white\u0026quot;, high=\u0026quot;red\u0026quot;, midpoint=0, space=\u0026quot;Lab\u0026quot;, na.value=\u0026quot;grey50\u0026quot;, guide=\u0026quot;colourbar\u0026quot;)+\rlabs(x=\u0026quot;Development year\u0026quot;, y=\u0026quot;Accident year\u0026quot;)+\rtheme(legend.position = \u0026quot;none\u0026quot;)+\rtheme(axis.title.x = element_text(size=8), axis.text.x = element_text(size=7))+\rtheme(axis.title.y = element_text(size=8), axis.text.y = element_text(size=7))+\rtheme(panel.background = element_rect(fill = \u0026quot;grey\u0026quot;, colour = \u0026quot;grey\u0026quot;, size = 2, linetype = \u0026quot;solid\u0026quot;),\rpanel.grid = element_line(colour=\u0026quot;grey\u0026quot;)) + annotate(geom=\u0026quot;rect\u0026quot;, xmin= 0.5, xmax=1.5, ymin=0.5, ymax=6.5, colour=\u0026quot;darkblue\u0026quot;, alpha=0.1, size=1.5) +\rannotate(geom=\u0026quot;rect\u0026quot;, xmin= 0.5, xmax=1.5, ymin=6.5, ymax=10.5, colour=\u0026quot;darkred\u0026quot;, alpha=0.1, size=1.5) +\rannotate(geom=\u0026quot;rect\u0026quot;, xmin= 1.5, xmax=2.5, ymin=0.5, ymax=6.5, colour=\u0026quot;darkred\u0026quot;, alpha=0.1, size=1.5) +\rannotate(geom=\u0026quot;rect\u0026quot;, xmin= 1.5, xmax=2.5, ymin=6.5, ymax=9.5, colour=\u0026quot;darkblue\u0026quot;, alpha=0.1, size=1.5) +\rannotate(geom=\u0026quot;segment\u0026quot;, x=3, xend=3, y=1, yend=8, arrow=arrow(), colour=\u0026quot;darkblue\u0026quot;, size=2) +\rannotate(geom=\u0026quot;rect\u0026quot;, xmin= 3.5, xmax=4.5, ymin=0.5, ymax=7.5, colour=\u0026quot;darkred\u0026quot;, alpha=0.1, size=1.5) print(p_hm)\r\rThis looks much better.\n\rWe should also look at the residual plots again\n\r\rp1 \u0026lt;- ggplot(data=msdata, aes(x=linear_predictor5, y=residuals5, colour=dev_year)) +\rgeom_point(size=2) +\rscale_colour_viridis(begin=0.9, end=0) +\rtheme_bw() + theme(legend.position = \u0026quot;none\u0026quot;) +\rggtitle(\u0026quot;Linear predictor\u0026quot;)\rp2 \u0026lt;- ggplot(data=msdata, aes(x=acc_year, y=residuals5)) +\rgeom_point(size=2, colour=\u0026quot;#2d708eff\u0026quot;) +\rtheme_bw() + ggtitle(\u0026quot;Accident year\u0026quot;)\rp3 \u0026lt;- ggplot(data=msdata, aes(x=dev_year, y=residuals5)) +\rgeom_point(size=2, colour=\u0026quot;#2d708eff\u0026quot;) +\rtheme_bw() + ggtitle(\u0026quot;Development year\u0026quot;)\rp4 \u0026lt;- ggplot(data=msdata, aes(x=cal_year, y=residuals5)) +\rgeom_point(size=2, colour=\u0026quot;#2d708eff\u0026quot;) +\rtheme_bw() + ggtitle(\u0026quot;Calendar year\u0026quot;)\rp \u0026lt;- plot_grid(p1, p2, p3, p4, nrow=2, rel_widths = c(1,1,1,1))\rp\r\r\rLoss reserve\r\rNow that we have a model, let’s produce the estimate of the outstanding claims by accident year and in total.\r\rTake the lower triangle data [futdata] created above\rAdd on the new variates we created\rScore the model on this data\rSummarise the results\r\r\r\nCreate the data and score using predict\n# add all model variates\rfutdata[, acc_year_2 := acc_year^2\r][, dev_year_m1 := dev_year - 1\r][, dev_year_ge_7 := pmax(0, dev_year - 7.5)\r][, dev_year_eq_1 := as.integer(dev_year == 1)\r][, dev_year_eq_2 := as.integer(dev_year == 2)\r][, dev_year_eq_3 := as.integer(dev_year == 3)\r][, dev_year_eq_4 := as.integer(dev_year == 4)\r][, acc_year_1_6 := as.integer(acc_year\u0026gt;=1 \u0026amp; acc_year \u0026lt;=6)]\rx \u0026lt;- predict(glm_fit5, newdata = futdata, type=\u0026quot;response\u0026quot;)\rfutdata[, incremental := x]\rhead(futdata)\r## acc_year dev_year cal_year acc_year_factor dev_year_factor incremental\r## 1: 2 10 12 2 10 3618.769\r## 2: 3 9 12 3 9 4470.907\r## 3: 3 10 13 3 10 4059.635\r## 4: 4 8 12 4 8 5324.841\r## 5: 4 9 13 4 9 4835.016\r## 6: 4 10 14 4 10 4390.250\r## acc_year_2 dev_year_m1 dev_year_ge_7 dev_year_eq_1 dev_year_eq_2\r## 1: 4 9 2.5 0 0\r## 2: 9 8 1.5 0 0\r## 3: 9 9 2.5 0 0\r## 4: 16 7 0.5 0 0\r## 5: 16 8 1.5 0 0\r## 6: 16 9 2.5 0 0\r## dev_year_eq_3 dev_year_eq_4 acc_year_1_6\r## 1: 0 0 1\r## 2: 0 0 1\r## 3: 0 0 1\r## 4: 0 0 1\r## 5: 0 0 1\r## 6: 0 0 1\rGet reserves by accident year and in total\nocl_year \u0026lt;- futdata[, lapply(.SD, sum), .SDcols=c(\u0026quot;incremental\u0026quot;), by=\u0026quot;acc_year\u0026quot;]\rocl_total \u0026lt;- ocl_year[, sum(incremental)]\rocl_year %\u0026gt;% knitr::kable(digits=c(0, 0))\r\r\racc_year\rincremental\r\r\r\r2\r3619\r\r3\r8531\r\r4\r14550\r\r5\r22173\r\r6\r32458\r\r7\r45695\r\r8\r62955\r\r9\r79301\r\r10\r101212\r\r\r\rThe total reserve is\nocl_total %\u0026gt;% round(0)\r## [1] 370493\r\rThese results are similar, though not identical, to the results given in Table 7-6 of the monograph.\rThis is because the forecast column of the monograph contains bootstrapped means rather than the model mean.\r\r\rConclusion\rThe aim of this article has been to demonstrate fitting a GLM to a loss reserve following the example used in the CAS monograph.\rWe started with the chain ladder equivalent - the cross classified model with an over-dispersed Poisson distribution, then first simplifed it and second, extended it to include some interactions.\rWe also cover how to create some of the plots discussed in the monograph in R, in particular residual scatter plots and the heat maps.\n\rSession information\rTo assist with reproducibility, here are details of my R session.\nsessionInfo() \r## R version 3.6.1 (2019-07-05)\r## Platform: x86_64-w64-mingw32/x64 (64-bit)\r## Running under: Windows 10 x64 (build 18363)\r## ## Matrix products: default\r## ## locale:\r## [1] LC_COLLATE=English_Australia.1252 LC_CTYPE=English_Australia.1252 ## [3] LC_MONETARY=English_Australia.1252 LC_NUMERIC=C ## [5] LC_TIME=English_Australia.1252 ## ## attached base packages:\r## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:\r## [1] magrittr_1.5 cowplot_1.0.0 viridis_0.5.1 viridisLite_0.3.0\r## [5] ggplot2_3.2.1 data.table_1.12.8 here_0.1 ## ## loaded via a namespace (and not attached):\r## [1] Rcpp_1.0.3 highr_0.8 compiler_3.6.1 pillar_1.4.2 ## [5] tools_3.6.1 digest_0.6.23 evaluate_0.14 lifecycle_0.1.0 ## [9] tibble_2.1.3 gtable_0.3.0 pkgconfig_2.0.3 rlang_0.4.2 ## [13] yaml_2.2.0 blogdown_0.17 xfun_0.11 gridExtra_2.3 ## [17] withr_2.1.2 stringr_1.4.0 dplyr_0.8.3 knitr_1.26 ## [21] rprojroot_1.3-2 grid_3.6.1 tidyselect_0.2.5 glue_1.3.1 ## [25] R6_2.4.1 rmarkdown_2.0 bookdown_0.17 farver_2.0.1 ## [29] purrr_0.3.3 backports_1.1.5 scales_1.1.0 htmltools_0.4.0 ## [33] assertthat_0.2.1 colorspace_1.4-1 labeling_0.3 stringi_1.4.3 ## [37] lazyeval_0.2.2 munsell_0.5.0 crayon_1.3.4\r\r","date":1573084800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573084800,"objectID":"7629df67317642c0797c0cd5406341ce","permalink":"/post/traditional-style-reserving-using-glms/","publishdate":"2019-11-07T00:00:00Z","relpermalink":"/post/traditional-style-reserving-using-glms/","section":"post","summary":"This post provides a worked example in R of fitting a GLM to some non-life claims reserving data.\rThe example and data are drawn from the CAS Monograph Stochastic Loss Reserving using Generalized Linear Models.\rHere we follow through the application of the cross-classified model from that monograph to the data (Chapter 3), and follow through with the additonal work to firstly simplify the model and secondly to improve the model fit through the use of some interaction terms (Chapter 7).","tags":["R","GLM"],"title":"Traditional-style reserving using GLMs","type":"post"},{"authors":null,"categories":["Reserving"],"content":"\rRecently, Greg Taylor, Hugh Miller and myself completed some work to develop an approach for fitting a claims reserving model using regularised regression, the LASSO in particular. See the SSRN paper.\nThe motivation behind this work is to develop an automatic method to construct a general insurance claims reserving model for data sets with complex features where simple approaches such as the chain ladder fail. In the past we have advocated the use of GLM models for such data sets, but the construction of a GLM is a time-consuming process, even for a skilled analyst. Our aim was to develop a procedure that produced a model similar to a GLM, but using machine learning techniques. This approach has performed well - as may be seen from the charts towards the end of this example, which show that the fitted curves can track the underlying specification quite well, even in the presence of significant noise, or difficult to detect interactions.\nThe paper fills in the details around the approach, so they will not be repeated here. Instead, this will focus on illustrating the use of the LASSO in claims reserving by fitting the model to one of the synthetic data examples discussed in the paper. I will be working through a fully worked example with all R code available. To reduce dependencies on external libraries, I have carried out the work in base R as much as possible.\nIf you want to access the underlying Rnotebook directly, you may access it at:\n\r2019-05-31-self-assembling-claim-reserving-models.Rmd.\r\rIntroduction to the example\rIn our paper we investigate the use of the LASSO using four synthetic (i.e. simulated) data sets as well as a real data set. This worked example will use the third simulated data set. the specifications for this data set are given in Section 4.2.1 of the paper. The main points to note are that this data set :\n\ris a 40x40 triangle, with\raccident and development period effects\rcalendar period effects (i.e. superimposed inflation)\ran step-interaction between accident and development period for accident periods greater than 17 and development periods greater than 20 (note this affects only 10 cells of the triangle)\r\r\rR code\rSetup\rFirst we must open R and load any libraries required. As noted above, I will use base R as much as possible so there are only two additional libraries required:\n\rglmnet - this is the library we used to implement the LASSO model. References are in our paper.\rggplot2 - for producing graphs.\r\rlibrary(glmnet)\r## Loading required package: Matrix\r## Loaded glmnet 3.0-2\rlibrary(ggplot2)\roptions(\u0026quot;scipen\u0026quot;=99)\r\r\rGenerating the synthetic data set\rFirst we need a data set. The code below, using a seed of 130 produces the data set used in the paper.\nBefore we generate the data, we need to create a small utility function which will be widely used - it takes a vector var and produces a spline piece between start and stop - flat (and 0) up to start, thereafter increasing to stop and then levelling out at this point. This is used both in the data generation and in the generation of basis functions for the LASSO.\nLinearSpline \u0026lt;- function(var, start, stop){\rpmin(stop - start, pmax(0, var - start))\r}\rThe code below generates the data set as specified in our paper. If you want to use our data set, use a seed of 130. Otherwise, use different seeds to produce different data sets.\n# initialise the seed for reproducibilty\rset.seed(130)\rnumperiods \u0026lt;- 40\r#periods\rkk \u0026lt;- rep(1:numperiods, each = numperiods) #AQ\rjj \u0026lt;- rep(1:numperiods, times= numperiods) #DQ\rtt \u0026lt;- kk+jj-1 # PQ\r# make a function of the SI effect to make it easier to read gammafunc \u0026lt;- function(t){\rgg \u0026lt;- ifelse( t\u0026lt;=12, gg \u0026lt;- 0.0075*LinearSpline(t,1,12),\rifelse(t\u0026lt;=24, gg \u0026lt;- 0.0075*LinearSpline(12,1,12) + 0.001* (t-12)*(t-11)/2,\rifelse(t\u0026lt;=32, gg \u0026lt;- 0.0075*LinearSpline(12,1,12) + 0.001* (24-12)*(24-11)/2,\rifelse(t\u0026lt;=40, gg \u0026lt;- 0.0075*LinearSpline(12,1,12) + 0.001* (24-12)*(24-11)/2 + 0.002*(t-32)*(t-31)/2,\r0.0075*LinearSpline(12,1,12) + 0.001* (24-12)*(24-11)/2 + 0.002*(40-32)*(40-31)/2\r))))\r1*gg #can scale up shape here if desired\r}\ralpha \u0026lt;- log(100000)+0.1*LinearSpline(kk,1,15)+0.2*LinearSpline(kk,15,20) - 0.05*LinearSpline(kk,30,40) beta \u0026lt;- (16/3 - 1)*log(jj)- (1/3)*jj # a is 16/3, b is 1/3 gamma \u0026lt;- gammafunc(tt)\rmu \u0026lt;- exp( alpha + beta + gamma + 0.3*beta*ifelse(kk\u0026gt;16 \u0026amp; jj\u0026gt;20,1,0)) # need to check\rvarbase \u0026lt;- (0.3 * mu[ kk==1 \u0026amp; jj ==16] )^2 # can scale variance up and down here\rCC \u0026lt;- varbase / mu[ kk==1 \u0026amp; jj ==16]\rvars \u0026lt;- CC*mu\rtausq \u0026lt;- log (vars / (mu^2) + 1)\rY \u0026lt;- exp( rnorm( numperiods^2, mean = log(mu)-0.5*tausq , sd = sqrt(tausq) ) )\rtrain_ind\u0026lt;-(tt\u0026lt;=numperiods) synthetic_data\u0026lt;-data.frame(Y, kk, jj, tt, mu, train_ind )\rcolnames(synthetic_data)\u0026lt;-c(\u0026quot;Y\u0026quot;, \u0026quot;acc\u0026quot;, \u0026quot;dev\u0026quot;, \u0026quot;cal\u0026quot;, \u0026quot;mu\u0026quot;, \u0026quot;train_ind\u0026quot;)\r# clean-up\rrm(Y, kk, jj, tt, mu, train_ind)\r\nLet’s have a look at the data\nhead(synthetic_data)\r## Y acc dev cal mu train_ind\r## 1 242671.2 1 1 1 71653.13 TRUE\r## 2 164001.3 1 2 2 1042775.62 TRUE\r## 3 3224477.8 1 3 3 4362599.77 TRUE\r## 4 3682530.8 1 4 4 10955670.09 TRUE\r## 5 10149368.6 1 5 5 20800545.12 TRUE\r## 6 28578274.7 1 6 6 33089166.75 TRUE\rtail(synthetic_data)\r## Y acc dev cal mu train_ind\r## 1595 125261750 40 35 74 109039367 FALSE\r## 1596 62657370 40 36 75 82853302 FALSE\r## 1597 63467681 40 37 76 62682720 FALSE\r## 1598 26041979 40 38 77 47227843 FALSE\r## 1599 33947274 40 39 78 35444881 FALSE\r## 1600 37258687 40 40 79 26503298 FALSE\rThe points to note about this data frame are:\n\rY is the comumn containing the data - assumed to be incremental claims payments here\racc, dev and cal are the columns with the accident, development and calendar period labels. Note that development period is numbered from 1.\rmu contains the values for \\(\\mu\\), the true underlying mean value according to the model specifications\rtrain_ind is a TRUE/FALSE vector. It is TRUE when the observation is in the past, a.k.a. the training data set and FALSE for future observations (unlike real data, we have the future available for a simulated data set)\r\r\n\rSpecifying the LASSO model\rThe LASSO model requires data (which we have), basis functions or regressors and model settings for the LASSO procedure. Unlike many regression problems, we actually only have 3 fundamental regressors - accident, development and calendar periods. A key part of our paper was how to expand these into a flexible set of basis functions, capable of capturing a variety of shapes in the model experience.\nIn a nutshell, the approach in our paper sets out:\n\rthe use of ramp and interactions of indicator (or heaviside) functions to capture a range of experience\rscaling factors for each of these.\r\rSince our process is intended to be automatic, we included all functions of accident, development and calendar periods into our synthetic data models, even though that introduces correlations between variables, and examined performance on that basis. For real problems (as in the real data example in the paper) we would recommend more discernment in the selection of which of the effects to include.\n\nScaling\rFor now, we are working to replicate the model for synthetic data set 3 so we include all possible functions (and indeed, this data set has accident, development and calendar period effects as well as an interaction). The first step is to calculate the scaling factors for each function derived from each of the three fundamental regressors. As per the paper we use \\(\\rho\\) scaling which is calculated as \\(\\sum{\\frac{(x-\\bar{x})^2}{n}}\\) where \\(\\bar{x}\\) is the mean of the regressor \\(x\\) and \\(n\\) is the number of elements in the regressor.\nFor this synthetic data set, it is important to remember that in the real world, the future data will not be available. So the fundamental vectors are those containing past (or training) data only.\nWe also need to calculate the scaling for each of the three regressors, so for coding efficiency and to reduce the risk of bugs, we first write a little function to do the calculations.\nNote that this scaling is a crucial component to the successful implementation of the reserving LASSO. The paper has more details, but basically the size of the parameters has a significant influence on whether they are included in a regularised regression, so if basis functions are on different scales, then this will influence their inclusion in the model.\n# function for ease\rGetScaling \u0026lt;- function(vec) {\rfn \u0026lt;- length(vec)\rfm \u0026lt;- mean(vec)\rfc \u0026lt;- vec - fm\rrho_factor \u0026lt;- ((sum(fc^2))/fn)^0.5\r}\rNow we apply this function to each of the three fundamental regressors (limited to the training or past data) and store the results in a list.\nsynthetic_data_train\u0026lt;-subset(synthetic_data, train_ind==TRUE)\rrho_factor_list \u0026lt;- vector(mode=\u0026quot;list\u0026quot;, length=3)\rnames(rho_factor_list) \u0026lt;- c(\u0026quot;acc\u0026quot;, \u0026quot;dev\u0026quot;, \u0026quot;cal\u0026quot;)\rfor (v in c(\u0026quot;acc\u0026quot;, \u0026quot;dev\u0026quot;, \u0026quot;cal\u0026quot;)){\rrho_factor_list[[v]] \u0026lt;- GetScaling(synthetic_data_train[[v]])\r}\rprint(rho_factor_list)\r## $acc\r## [1] 9.539392\r## ## $dev\r## [1] 9.539392\r## ## $cal\r## [1] 9.539392\rThe factors are all equal in this case. In hindsight this makes sense - we have the complete 40 x 40 past triangle, and all regressors are numbered from 1, so all three regressors are permutations of the same numbers.\n\n\rBasis functions\rOur recommended set of basis functions include:\n\rramp functions for main effects:\r\r\\(R_j(i) = \\max(j-i, 0)\\) for \\(j=\\) accident, development and calendar periods and \\(i=1, 2, ..., 39\\)\r\rinteractions of the heaviside indicator functions:\r\r\\(H_j(i) = I(j\u0026gt;=i)\\), i.e. all combinations of \\(H_{acc}(i) * H_{dev}(k)\\), \\(H_{acc}(i) * H_{cal}(k)\\), \\(H_{dev}(i) * H_{cal}(k)\\).\r\r\r\nMain effects - ramp functions\rTo calculate the ramps we first write a function to do this, since we need to repeat this three times. glmnet expects a matrix of values for the basis functions, so we create a matrix rather than a data.frame. Furthermore, to ensure speed, we preallocate the space to store all the basis functions before running a loop to produce all the ramp functions (many people are scared of loops in R finding them slow, but often this is because they do not preallocate memory beforehand to store the results of the loop)\nGetRamps \u0026lt;- function(vec, vecname, np, scaling){\r# vec = fundamental regressor\r# vecname = name of regressor\r# np = number of periods\r# scaling = scaling factor to use\r# pre-allocate the matrix to hold the results for speed/efficiency\rn \u0026lt;- length(vec)\rnramps \u0026lt;- (np-1)\rmat \u0026lt;- matrix(data=NA, nrow=n, ncol=nramps)\rcnames \u0026lt;- vector(mode=\u0026quot;character\u0026quot;, length=nramps)\rcol_indx \u0026lt;- 0\rfor (i in 1:(np-1)){\rcol_indx \u0026lt;- col_indx + 1\rmat[, col_indx] \u0026lt;- LinearSpline(vec, i, 999) / scaling\rcnames[col_indx] \u0026lt;- paste0(\u0026quot;L_\u0026quot;, i, \u0026quot;_999_\u0026quot;, vecname)\r}\rcolnames(mat) \u0026lt;- cnames\rreturn(mat)\r}\rNow let’s run the function 3 times to get each set of ramp functions and combine them at the end. Note that we produce ramps for the entire data set, past and future. This leads to a 1600 x 117 (39*3) matrix.\nmain_effects_acc \u0026lt;- GetRamps(vec = synthetic_data[[\u0026quot;acc\u0026quot;]], vecname = \u0026quot;acc\u0026quot;, np = numperiods, scaling = rho_factor_list[[\u0026quot;acc\u0026quot;]])\rmain_effects_dev \u0026lt;- GetRamps(vec = synthetic_data[[\u0026quot;dev\u0026quot;]], vecname = \u0026quot;dev\u0026quot;, np = numperiods, scaling = rho_factor_list[[\u0026quot;dev\u0026quot;]])\rmain_effects_cal \u0026lt;- GetRamps(vec = synthetic_data[[\u0026quot;cal\u0026quot;]], vecname = \u0026quot;cal\u0026quot;, np = numperiods, scaling = rho_factor_list[[\u0026quot;cal\u0026quot;]])\rmain_effects \u0026lt;- cbind(main_effects_acc, main_effects_dev, main_effects_cal)\rprint(dim(main_effects))\r## [1] 1600 117\r\n\r\rInteraction effects - heaviside functions\rWe follow a similar approach to the above - write a function since we need to call it 3 times. It is even more important to preallocate memory here before looping to create interactions because of the number of these. Without this, the loop would need to copy an ever-growing matrix each time, thereby significantly slowing down runtimes. Our approach of slotting values into reserved space is far more efficient.\nHere’s the function:\nGetInts \u0026lt;- function(vec1, vec2, vecname1, vecname2, np, scaling1, scaling2) {\r# pre-allocate the matrix to hold the results for speed/efficiency\rn \u0026lt;- length(vec1)\rnints \u0026lt;- (np-1)*(np-1)\rmat \u0026lt;- matrix(data=NA_real_, nrow=n, ncol=nints)\rcnames \u0026lt;- vector(mode=\u0026quot;character\u0026quot;, length=nints)\rcol_indx \u0026lt;- 0\rfor (i in 2:np){\rivec \u0026lt;- LinearSpline(vec1, i-1, i) / scaling1\riname \u0026lt;- paste0(\u0026quot;I_\u0026quot;, vecname1, \u0026quot;_ge_\u0026quot;, i)\rif (length(ivec[is.na(ivec)]\u0026gt;0)) print(paste(\u0026quot;NAs in ivec for\u0026quot;, i))\rfor (j in 2:np){\rcol_indx \u0026lt;- col_indx + 1 mat[, col_indx] \u0026lt;- ivec * LinearSpline(vec2, j-1, j) / scaling2\rcnames[col_indx] \u0026lt;- paste0(iname, \u0026quot;*I_\u0026quot;, vecname2, \u0026quot;_ge_\u0026quot;, j)\rjvec \u0026lt;- LinearSpline(vec2, j-1, j) / scaling2\rif (length(jvec[is.na(jvec)]\u0026gt;0)) print(paste(\u0026quot;NAs in jvec for\u0026quot;, j))\r}\r}\rcolnames(mat) \u0026lt;- cnames\rreturn(mat)\r}\rNow we call it and check the dimensions - 1600 x 4563(! 3 * 39 * 39).:\nint_effects \u0026lt;- cbind(\rGetInts(vec1=synthetic_data[[\u0026quot;acc\u0026quot;]], vecname1=\u0026quot;acc\u0026quot;, scaling1=rho_factor_list[[\u0026quot;acc\u0026quot;]], np=numperiods, vec2=synthetic_data[[\u0026quot;dev\u0026quot;]], vecname2=\u0026quot;dev\u0026quot;, scaling2=rho_factor_list[[\u0026quot;dev\u0026quot;]]),\rGetInts(vec1=synthetic_data[[\u0026quot;dev\u0026quot;]], vecname1=\u0026quot;dev\u0026quot;, scaling1=rho_factor_list[[\u0026quot;dev\u0026quot;]], np=numperiods, vec2=synthetic_data[[\u0026quot;cal\u0026quot;]], vecname2=\u0026quot;cal\u0026quot;, scaling2=rho_factor_list[[\u0026quot;cal\u0026quot;]]),\rGetInts(vec1=synthetic_data[[\u0026quot;acc\u0026quot;]], vecname1=\u0026quot;acc\u0026quot;, scaling1=rho_factor_list[[\u0026quot;acc\u0026quot;]], np=numperiods, vec2=synthetic_data[[\u0026quot;cal\u0026quot;]], vecname2=\u0026quot;cal\u0026quot;, scaling2=rho_factor_list[[\u0026quot;cal\u0026quot;]])\r)\rprint(dim(int_effects))\r## [1] 1600 4563\rFinally combine the main and interactions effects into a single matrix - varset. Also save a vector containing the training (past) data indicator and get the number of main and interaction effects.\nvarset \u0026lt;- cbind(main_effects, int_effects)\rtrain_ind \u0026lt;- synthetic_data[[\u0026quot;train_ind\u0026quot;]]\rnum_main_effects \u0026lt;- ncol(main_effects)\rnum_interactions \u0026lt;- ncol(int_effects)\r\n\rLASSO setup\rThe glmnet package has two functions: glmnet and cv.glmnet. glmnet fits a regularised regression model while cv.glmnet fits using cross validation. We make use of both functions, first glmnet to get a vector of LASSO penalties (referred to as \\(\\lambda\\)), then cv.glmnet using the \\(\\lambda\\)s from glmnet in the cross validation process.\nIn addition to the data and basis functions, glmnet and cv.glmnet have a number of tuning parameters. These include:\n\rA set of values for \\(\\lambda\\), the regularision penalty. We use the \\(\\lambda\\) vector estimated by glmnet and then extend it further to ensure that we have a comprehensive range of \\(\\lambda\\) values for the cross-validation exercise.\n\rpenalty factors: this is a basis function specific penalty factor so provides the functionality to have different penalties for the different basis functions, i.e. if \\(pf\\) is the vector of penalty functions, then \\(\\lambda {pf}\\) is the set of penalty factors used. Here we use the default of the same scaling for all functions (factors of 1 throughout), but we set up a penalty factor vector below in case you would like to experiment with it - e.g. to make interactions less or more likely to be used you could increase/decrease the penalty for interactions.\n\rpmax - the maximum number of variables ever to be non-zero in a model\n\rdfmax - maximum number of variables in a model\n\rfamily - the response type to use. Of the options offered by the glmnet package, the Poisson is the best selection for a claims reserving model.\n\r\rThe settings we used for the latter 3 are below.\npenalty_factor \u0026lt;- c( rep(1,num_main_effects), rep(1, num_interactions))\rmy_pmax \u0026lt;- numperiods^2 # max number of variables ever to be nonzero\rmy_dfmax \u0026lt;- numperiods*10 #max number of vars in the model\rTo get the vector \\(\\lambda\\) values to use in the cross validation, run glmnet as below. Note that alpha=1 makes it fit a LASSO.\rWe have also increased the maximum number of iterations to 200000 since convergence can be slow in this example. The code takes about 13-15 sec on my computer.\nNote we set the standardize argument to false - this is because we use our own standardisation for the basis functions.\ntime1 \u0026lt;- Sys.time()\rpre_fit \u0026lt;- glmnet(x = varset[train_ind,], y = synthetic_data$Y[train_ind], family = \u0026quot;poisson\u0026quot;, nlambda = 200, thresh = 1e-08, lambda.min.ratio = 0, dfmax = my_dfmax, pmax = my_pmax, alpha = 1, standardize = FALSE, penalty.factor = penalty_factor, maxit = 200000)\rprint(paste(\u0026quot;time taken: \u0026quot;, Sys.time() - time1))\r## [1] \u0026quot;time taken: 15.7549350261688\u0026quot;\rThe \\(\\lambda\\) vector that we actually used in the cross validation implementation of the LASSO is an extended version of the one automatically generated by glmnet. This is to ensure that we do find the minimum CV error point as sometimes it may be beyond the smallest value for \\(\\lambda\\) produced by glmnet above.\nlambdavec \u0026lt;- c(pre_fit$lambda, min(pre_fit$lambda)*(0.85^(1:50))) # lengthen lambda vector\r\r\rFitting the LASSO model\rWe now do the actual fitting using 8-fold cross validation (Rob Tibshirani, who wrote the original statistical paper on LASSO, recommends between 5 and 10 folds). We use lambdavec, rather than letting cv.glmnet estimate its own version. Otherwise the settings are the same.\n#fit now using CV\rtime1 \u0026lt;- Sys.time()\rcv_fit \u0026lt;- cv.glmnet(x = varset[train_ind,], y = synthetic_data$Y[train_ind], family = \u0026quot;poisson\u0026quot;, lambda = lambdavec, nfolds = 8,\rthresh = 1e-08, lambda.min.ratio = 0, dfmax = my_dfmax, pmax = my_pmax, alpha = 1, standardize = FALSE, penalty.factor = penalty_factor, maxit = 200000)\r## Warning: from glmnet Fortran code (error code -10195); Number of nonzero\r## coefficients along the path exceeds pmax=1600 at 195th lambda value; solutions\r## for larger lambdas returned\r## Warning: from glmnet Fortran code (error code -10196); Number of nonzero\r## coefficients along the path exceeds pmax=1600 at 196th lambda value; solutions\r## for larger lambdas returned\r## Warning: from glmnet Fortran code (error code -10196); Number of nonzero\r## coefficients along the path exceeds pmax=1600 at 196th lambda value; solutions\r## for larger lambdas returned\r## Warning: from glmnet Fortran code (error code -10196); Number of nonzero\r## coefficients along the path exceeds pmax=1600 at 196th lambda value; solutions\r## for larger lambdas returned\r## Warning: from glmnet Fortran code (error code -10195); Number of nonzero\r## coefficients along the path exceeds pmax=1600 at 195th lambda value; solutions\r## for larger lambdas returned\r## Warning: from glmnet Fortran code (error code -10195); Number of nonzero\r## coefficients along the path exceeds pmax=1600 at 195th lambda value; solutions\r## for larger lambdas returned\r## Warning: from glmnet Fortran code (error code -10195); Number of nonzero\r## coefficients along the path exceeds pmax=1600 at 195th lambda value; solutions\r## for larger lambdas returned\r## Warning: from glmnet Fortran code (error code -10196); Number of nonzero\r## coefficients along the path exceeds pmax=1600 at 196th lambda value; solutions\r## for larger lambdas returned\r## Warning: from glmnet Fortran code (error code -10196); Number of nonzero\r## coefficients along the path exceeds pmax=1600 at 196th lambda value; solutions\r## for larger lambdas returned\rprint(paste(\u0026quot;time taken for cross validation fit: \u0026quot;, Sys.time() - time1))\r## [1] \u0026quot;time taken for cross validation fit: 3.81268668572108\u0026quot;\r\nEek! Fortran error\nYes, there are Fortran errors. However, if you read the errors, you see that they result from our settings of the pmax variable. Basically models for the 195th and higher values (and since the \\(\\lambda\\) values monotonically decrease this means smaller values) in the lambdavec do not return solutions that meet the constraints on pmax.\nTherefore the errors are not an issue as long as the cross validation process has found a minimum value within the range of \\(\\lambda\\) values it does consider. cv.glmnet objects have a plot method associated with them which plots the CV fit, so I’ll use it here to see if a minimum value was identified:\nplot(cv_fit)\rThe dashed lines represent the minimum CV model (smaller \\(\\lambda\\)) and one a standard deviation away. These are selections commonly used by modellers. So while we only got models for 194 of the original 250 \\(\\lambda\\) values input in lambdavec, these models do include a model which produces the minimum CV error (this is actually that the 148th value in lambdavec).\n\nGiven this is simulated data, we can also look at test error - the graph below shows training, test and CV error.\n#training error\rpredicted_train \u0026lt;- exp(predict(cv_fit, newx = varset[train_ind,], s = cv_fit$lambda))\rerror_train \u0026lt;- colMeans(((synthetic_data$Y[train_ind] - predicted_train)^2) / predicted_train )\r#test error - note predicted_test \u0026lt;- exp(predict(cv_fit, newx = varset[!train_ind,], s = cv_fit$lambda))\rerror_test \u0026lt;- colMeans(((synthetic_data$Y[!train_ind] - predicted_test)^2) / predicted_test )\r# number of parameters in models (df field)\r# since not all lambdas returned values, use length of cv.glmnet object to get the right value\ruse_df \u0026lt;- cv_fit$glmnet.fit$df[1:length(cv_fit$lambda)]\r#make a stacked data set suitable for ggplot [ i.e. tidy format]\rdferrorg \u0026lt;- data.frame( rep(1:length(use_df), times=3), rep(use_df, times=3), c(error_train, error_test, cv_fit$cvm)/1000,\rc( rep(\u0026quot;Training error\u0026quot;, times=length(use_df)), rep(\u0026quot;Test error\u0026quot;, times=length(use_df)), rep(\u0026quot;CV error\u0026quot;, times=length(use_df)) )\r)\rcolnames(dferrorg)\u0026lt;-c(\u0026quot;model_number\u0026quot;, \u0026quot;num_params\u0026quot;, \u0026quot;Error\u0026quot;, \u0026quot;labels\u0026quot;) g \u0026lt;- ggplot(data=dferrorg, aes(x=model_number, y=Error, colour=labels))+\rgeom_line(size=1.5, aes(linetype=labels, colour=labels), alpha=0.8)+\rtheme_classic()+\rtheme(legend.position=\u0026quot;bottom\u0026quot;)+\rlabs(x=\u0026quot;Model number\u0026quot;, y=\u0026quot;Error measure (thousands)\u0026quot;)+\rscale_color_manual(name=\u0026quot;\u0026quot;, values=c(\u0026quot;grey40\u0026quot;, \u0026quot;steelblue3\u0026quot;, \u0026quot;dodgerblue4\u0026quot;))+\rscale_linetype_manual(name=\u0026quot;\u0026quot;, values=c(\u0026quot;solid\u0026quot;, \u0026quot;dashed\u0026quot;, \u0026quot;dotdash\u0026quot;))+\rscale_y_log10(labels=scales::comma)+\rNULL\rprint(g)\rHappily, low values of the test error align with low CV error values - which is what we would expect to see.\n\n\r\rAnalysing the model\rWe have used the model corresponding to the minimum CV error in the paper (lambda.min in the cv.glmnet results object, cv_fit. First let’s look at the coefficients in this model.\n#all coefficients\rcoefs_min \u0026lt;- predict(cv_fit, type = \u0026quot;coefficients\u0026quot;, s = cv_fit$lambda.min)\rcoefnames \u0026lt;- c(\u0026quot;Intercept\u0026quot;, colnames(varset))\r#indicators for non-zero ones\rind_nz_min\u0026lt;-which(!(coefs_min == 0))\r#non-zero coefficient\rnzcoefs_min\u0026lt;-cbind(coefs_min[ind_nz_min,])\rrownames(nzcoefs_min)\u0026lt;-coefnames[ind_nz_min]\rcolnames(nzcoefs_min)\u0026lt;-c(\u0026quot;coefficients [min CV model]\u0026quot;)\rprint(paste(\u0026quot;Number of non-zero coefficients in min CV model:\u0026quot;, length(nzcoefs_min)))\r## [1] \u0026quot;Number of non-zero coefficients in min CV model: 85\u0026quot;\rprint(nzcoefs_min)\r## coefficients [min CV model]\r## Intercept 12.90849898487\r## L_3_999_acc -0.17095448722\r## L_6_999_acc 0.20215486971\r## L_8_999_acc -0.13683788579\r## L_9_999_acc -0.00672219229\r## L_10_999_acc -0.00726869090\r## L_11_999_acc -0.02324636411\r## L_12_999_acc 0.35610585646\r## L_14_999_acc -0.18739286935\r## L_15_999_acc 0.40181871769\r## L_16_999_acc 0.87558148156\r## L_18_999_acc -0.51019660027\r## L_19_999_acc -0.16864836308\r## L_20_999_acc -1.43901702819\r## L_21_999_acc 0.00953486890\r## L_23_999_acc -0.79245482450\r## L_24_999_acc 1.24495942278\r## L_25_999_acc -0.93508758199\r## L_26_999_acc 0.33765206640\r## L_30_999_acc -0.70157530992\r## L_33_999_acc 0.50643663606\r## L_1_999_dev 8.99462960013\r## L_2_999_dev -0.01963809794\r## L_3_999_dev -0.07441072105\r## L_4_999_dev -3.07653114572\r## L_5_999_dev -2.80431602371\r## L_6_999_dev -0.68784566665\r## L_7_999_dev -0.75804243590\r## L_8_999_dev -0.98088683637\r## L_9_999_dev -0.22339935171\r## L_10_999_dev -0.29737982507\r## L_11_999_dev -0.65592216016\r## L_12_999_dev -0.35450909252\r## L_13_999_dev -0.14473152847\r## L_14_999_dev 0.04054773673\r## L_15_999_dev -0.77588436820\r## L_17_999_dev -0.03182413168\r## L_19_999_dev 0.67859925074\r## L_21_999_dev -1.60282884304\r## L_22_999_dev -0.36525227453\r## L_24_999_dev 1.09988151243\r## L_26_999_dev -1.09424403563\r## L_27_999_dev -0.16350768634\r## L_29_999_dev 0.88266152283\r## L_35_999_dev 1.18335691537\r## L_36_999_dev 3.25213173780\r## L_1_999_cal 1.18058081966\r## L_8_999_cal -0.00180679768\r## L_10_999_cal -0.04581220530\r## L_11_999_cal -0.00001361552\r## L_13_999_cal -0.59595302430\r## L_15_999_cal 0.35077252912\r## L_16_999_cal 0.23459204631\r## L_17_999_cal 0.04789306573\r## L_20_999_cal 0.01820235408\r## L_21_999_cal 0.00556136411\r## L_22_999_cal -0.05372169105\r## L_24_999_cal -0.39892379289\r## L_26_999_cal 0.12054003466\r## L_28_999_cal 0.16486699374\r## L_29_999_cal 0.18948696365\r## L_31_999_cal 0.13696525004\r## L_32_999_cal -0.83932204876\r## L_33_999_cal 0.45155052203\r## L_34_999_cal 0.03672725527\r## L_35_999_cal -0.23243263792\r## L_36_999_cal 0.90085214853\r## L_37_999_cal -0.54525536224\r## L_38_999_cal 0.50161020747\r## L_39_999_cal -0.74904517614\r## I_acc_ge_17*I_dev_ge_19 5.51496328897\r## I_acc_ge_17*I_dev_ge_20 0.57649429567\r## I_acc_ge_17*I_dev_ge_21 137.29149937434\r## I_acc_ge_18*I_dev_ge_21 6.45465834886\r## I_acc_ge_20*I_dev_ge_17 -1.11190434265\r## I_acc_ge_21*I_dev_ge_9 0.20809357209\r## I_dev_ge_10*I_cal_ge_31 -2.32990834511\r## I_dev_ge_12*I_cal_ge_26 -0.80542294977\r## I_dev_ge_13*I_cal_ge_37 1.16374345492\r## I_dev_ge_14*I_cal_ge_26 -0.44214116825\r## I_dev_ge_22*I_cal_ge_39 1.78463806790\r## I_acc_ge_20*I_cal_ge_36 -0.18540685549\r## I_acc_ge_20*I_cal_ge_37 -4.85927363521\r## I_acc_ge_20*I_cal_ge_38 -2.86273908989\r## I_acc_ge_21*I_cal_ge_31 0.29625560409\rNote the interactions at the end. Are these detecting the interaction that we know is in this simulated data set? We will find out below.\n\nIt is also useful to look at actual and fitted plots for the different predictors. The paper shows a number of these.\nTo produce these plots, we first add the column of fitted values to the data.frame holding the data using the predict method for a cv.glmnet object. Our selected model is that corresponding to the minimum CV error, which is corresponds to the \\(\\lambda\\) stored by the cv_fit$lambda_min component of the cv.glmnet object.\nsynthetic_data$fitted_lasso\u0026lt;- as.vector(exp(predict(cv_fit, newx = varset, s = cv_fit$lambda.min)) )\rThe function below produces the tracking graphs shown in the paper - plot values for all levels of one fundamental predictor holding a second predictor at a fixed value. To help with looking at the data, it also shades the past part of the data in grey.\nSince ggplot2 is a tidyverse package, it is easiest to put our data into tidy format (essentially stacked/long output) prior to using ggplot.\nGraphModelVals\u0026lt;-function(data, primary_predictor, secondary_predictor, secondary_predictor_val, fitted_name, predictor_label){\r#extract data we want to use\ruse_data \u0026lt;- data[data[[secondary_predictor]] == secondary_predictor_val,]\r# turn into tidy layout - note that we have simulated data, underlying mean, fitted data all to stack.\rdata_tidy \u0026lt;- data.frame( rep(use_data[[primary_predictor]], times=3),\rc(use_data[[\u0026quot;Y\u0026quot;]], use_data[[\u0026quot;mu\u0026quot;]], use_data[[fitted_name]]),\rc(rep(\u0026quot;Simulated\u0026quot;, times=nrow(use_data)), rep(\u0026quot;Underlying\u0026quot;, times=nrow(use_data)), rep(\u0026quot;Lasso\u0026quot;, times=nrow(use_data))) )\rcolnames(data_tidy) \u0026lt;- c(\u0026quot;predictor\u0026quot;, \u0026quot;values\u0026quot;, \u0026quot;data_labels\u0026quot;)\rdata_tidy$values \u0026lt;- log(data_tidy$values)\r# extract values for past rectangle\rxmin1 \u0026lt;- min(use_data[[primary_predictor]][use_data$train_ind==TRUE])\rxmax1 \u0026lt;- max(use_data[[primary_predictor]][use_data$train_ind==TRUE])\rymin1 \u0026lt;- min(data_tidy$values)*0.95\rymax1 \u0026lt;- max(data_tidy$values)*1.05\rg \u0026lt;- ggplot(data=data_tidy, aes(x=predictor, y=values, group=data_labels))+\rgeom_line(aes(linetype=data_labels, colour=data_labels, size=data_labels, alpha=data_labels))+\rscale_colour_manual(name=\u0026quot;\u0026quot;, values=c(\u0026quot;indianred4\u0026quot;, \u0026quot;slategrey\u0026quot;, \u0026quot;slategrey\u0026quot;))+\rscale_linetype_manual(name=\u0026quot;\u0026quot;, values=c(\u0026quot;solid\u0026quot;, \u0026quot;solid\u0026quot;, \u0026quot;dotted\u0026quot;))+\rscale_size_manual(name=\u0026quot;\u0026quot;, values=c(2,1,1))+\rscale_alpha_manual(name=\u0026quot;\u0026quot;, values=c(0.8, 0.5, 0.5))+\rtheme_classic()+\rannotate(geom=\u0026quot;rect\u0026quot;, xmin=xmin1, xmax=xmax1, ymin=ymin1, ymax=ymax1, alpha=0.1)+\rtheme(legend.position=\u0026quot;bottom\u0026quot;)+\rlabs(x=predictor_label, y=\u0026quot;Log(Payments)\u0026quot;, title=paste(predictor_label, \u0026quot;tracking for\u0026quot;, secondary_predictor, \u0026quot;=\u0026quot;, secondary_predictor_val))\rinvisible(list(data=data_tidy, graph=g))\r}\rNow let’s look at development quarter when accident quarter is 20. Remember the step-interaction starts at dev=21 - which we see in the graph.\ndev_graph_list \u0026lt;- GraphModelVals(data = synthetic_data, primary_predictor = \u0026quot;dev\u0026quot;, secondary_predictor = \u0026quot;acc\u0026quot;, secondary_predictor_val = 20, fitted_name = \u0026quot;fitted_lasso\u0026quot;,\rpredictor_label = \u0026quot;Development quarter\u0026quot;)\rdev_graph_list$graph\rSimilarly we can look at accident quarter tracking when development quarter is 24 and again see the interaction.\nacc_graph_list \u0026lt;- GraphModelVals(data = synthetic_data, primary_predictor = \u0026quot;acc\u0026quot;, secondary_predictor = \u0026quot;dev\u0026quot;, secondary_predictor_val = 24, fitted_name = \u0026quot;fitted_lasso\u0026quot;,\rpredictor_label = \u0026quot;Accident quarter\u0026quot;)\racc_graph_list$graph\rYou should, of course, carry out a full model validation exercise on any model prior to use, examining residuals, triangular heat maps and tweak the model if needed.\n\n\rClaims reserves\rFinally, let’s get some claims reserve estimates and compare to those from an 8-period chain ladder.\nFirst let’s calculate the chainladder reserve.\n# cumulative payments on training data set\rsynthetic_data_train$Ycum \u0026lt;- unlist(tapply(synthetic_data_train$Y, synthetic_data_train$acc, cumsum))\r# calc cl factors using an 8 quarter average\rcl_fac \u0026lt;- numeric(numperiods-1)\rfor (j in 1:numperiods-1){\rcl_fac[j] \u0026lt;- sum(subset(synthetic_data_train, dev == j+1 \u0026amp; acc \u0026gt; (numperiods-8-j) \u0026amp; acc \u0026lt;= numperiods-j)$Ycum) / sum(subset(synthetic_data_train, dev == j \u0026amp; acc \u0026gt; (numperiods-8-j) \u0026amp; acc \u0026lt;= numperiods-j)$Ycum)\r}\r# accumulate the CL factors\rcl_cum \u0026lt;- cumprod(rev(cl_fac))\r# leading diagonal\rleading_diagonal \u0026lt;- subset(synthetic_data_train, cal == numperiods \u0026amp; acc\u0026gt;1)$Ycum\r# CL amounts now\rcl_os \u0026lt;- cl_cum * leading_diagonal - leading_diagonal\rRunning the code shows that the reserve for accident period 40 is a bit high(!) - so the y-axis scale on any plots may need to be adjusted for display purposes.\nprint(\u0026quot;CL outstanding estimates\u0026quot;)\r## [1] \u0026quot;CL outstanding estimates\u0026quot;\rhead( data.frame(Accident=numperiods:2, os = rev(cl_os/1000000000)))\r## Accident os\r## 1 40 488.32119\r## 2 39 13.97485\r## 3 38 21.60132\r## 4 37 17.46894\r## 5 36 21.27673\r## 6 35 22.05057\rWe use the tapply function to calculate the outstanding amounts by accident period for the LASSO model as well as the true values (both the “actual” simulated values and the true underlying values).\nsynthetic_data_test \u0026lt;- subset(synthetic_data, train_ind == FALSE)\rlasso_os \u0026lt;- tapply(synthetic_data_test$fitted_lasso, synthetic_data_test$acc, sum)\rsim_os \u0026lt;- tapply(synthetic_data_test$Y, synthetic_data_test$acc, sum)\rtrue_os \u0026lt;- tapply(synthetic_data_test$mu, synthetic_data_test$acc, sum)\r#combine into a tidy dataset for ggplot\r# add a linetype option to have different linetypes\rcompare_os \u0026lt;- data.frame(\rrep(2:numperiods, times=4), c(sim_os, lasso_os, cl_os, true_os)/1000000000,\rc(rep(\u0026quot;Simulated\u0026quot;, times=numperiods-1), rep(\u0026quot;Lasso\u0026quot;, times=numperiods-1), rep(\u0026quot;Chainladder (8 qtr)\u0026quot;, times=numperiods-1), rep(\u0026quot;Underlying\u0026quot;, times=numperiods-1) )\r)\rcolnames(compare_os)\u0026lt;-c(\u0026quot;Accident\u0026quot;, \u0026quot;Outstanding\u0026quot;, \u0026quot;data_labels\u0026quot;)\rHere’s a plot of the results (similar to that in the paper). Note that the y-axis is restricted for readability so that the actual chain ladder value for accident period 40 does not display on the graph.\nos_plot \u0026lt;-\rggplot(data=compare_os, aes(x=Accident, y=Outstanding, group=data_labels))+\rgeom_line(aes(colour=data_labels, linetype=data_labels), alpha=0.8, size=0.75)+\rscale_colour_manual(name=\u0026quot;\u0026quot;, values=c(\u0026quot;steelblue3\u0026quot;, \u0026quot;indianred4\u0026quot;, \u0026quot;slategrey\u0026quot;, \u0026quot;slategrey\u0026quot; ))+\rscale_linetype_manual(name=\u0026quot;\u0026quot;, values=c(\u0026quot;dashed\u0026quot;, \u0026quot;solid\u0026quot;, \u0026quot;dotted\u0026quot;, \u0026quot;solid\u0026quot; ))+\rgeom_line(data=subset(compare_os, data_labels==\u0026quot;Lasso\u0026quot;), aes(colour=data_labels), size=1.25, alpha=0.8, colour=\u0026quot;indianred4\u0026quot;, linetype=\u0026quot;solid\u0026quot;)+\rcoord_cartesian(ylim=c(0, 40))+\rtheme_classic()+\rtheme(legend.position=\u0026quot;bottom\u0026quot;, legend.title=element_blank())+\rscale_y_continuous(labels=scales::comma)+\rlabs(x=\u0026quot;Accident quarter\u0026quot;, y=\u0026quot;Amount ($B)\u0026quot;)+\rNULL\ros_plot\rYou can see from the graph that - despite the presence of an interaction affecting only a small number of cells, the LASSO model detects and responds appropriately to this change. By contrast, the chain ladder model does not perform so well.\n\n\rConclusion\rThe aim of this article has been to demonstrate the fitting of a claims reserving model using a LASSO approach in R and to produce some of the model diagnostic and results output that a user might wish to examine. If you would like to experiment some more, you could try modifying the synthetic data set code to produce other types of simulated data (such as those in our paper), or try it out on a real data example.\n\rSession information\rTo assist with reproducibility, here are details of my R session.\nsessionInfo()\r## R version 3.6.1 (2019-07-05)\r## Platform: x86_64-w64-mingw32/x64 (64-bit)\r## Running under: Windows 10 x64 (build 18363)\r## ## Matrix products: default\r## ## locale:\r## [1] LC_COLLATE=English_Australia.1252 LC_CTYPE=English_Australia.1252 ## [3] LC_MONETARY=English_Australia.1252 LC_NUMERIC=C ## [5] LC_TIME=English_Australia.1252 ## ## attached base packages:\r## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:\r## [1] ggplot2_3.2.1 glmnet_3.0-2 Matrix_1.2-17\r## ## loaded via a namespace (and not attached):\r## [1] Rcpp_1.0.3 compiler_3.6.1 pillar_1.4.2 iterators_1.0.12\r## [5] tools_3.6.1 digest_0.6.23 evaluate_0.14 lifecycle_0.1.0 ## [9] tibble_2.1.3 gtable_0.3.0 lattice_0.20-38 pkgconfig_2.0.3 ## [13] rlang_0.4.2 foreach_1.4.7 yaml_2.2.0 blogdown_0.17 ## [17] xfun_0.11 withr_2.1.2 stringr_1.4.0 dplyr_0.8.3 ## [21] knitr_1.26 tidyselect_0.2.5 grid_3.6.1 glue_1.3.1 ## [25] R6_2.4.1 rmarkdown_2.0 bookdown_0.17 farver_2.0.1 ## [29] purrr_0.3.3 magrittr_1.5 scales_1.1.0 codetools_0.2-16\r## [33] htmltools_0.4.0 assertthat_0.2.1 shape_1.4.4 colorspace_1.4-1\r## [37] labeling_0.3 stringi_1.4.3 lazyeval_0.2.2 munsell_0.5.0 ## [41] crayon_1.3.4\r\r","date":1559260800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559260800,"objectID":"8a74417e083c526edd0f85941c1d6bfa","permalink":"/post/self-assembling-claim-reserving-models/","publishdate":"2019-05-31T00:00:00Z","relpermalink":"/post/self-assembling-claim-reserving-models/","section":"post","summary":"Recently, Greg Taylor, Hugh Miller and myself completed some work to develop an approach for fitting a claims reserving model using regularised regression, the LASSO in particular. See the SSRN paper.\nThe motivation behind this work is to develop an automatic method to construct a general insurance claims reserving model for data sets with complex features where simple approaches such as the chain ladder fail. In the past we have advocated the use of GLM models for such data sets, but the construction of a GLM is a time-consuming process, even for a skilled analyst.","tags":["R","Lasso"],"title":"Self-assembling claim reserving models","type":"post"},{"authors":["Grainne McGuire","Greg Taylor","Hugh Miller"],"categories":null,"content":"\rThe lasso is applied in an attempt to automate the loss reserving problem. The regression form contained within the lasso is a GLM, and so that the model has all the versatility of that type of model, but the model selection is automated and the parameter coefficients for selected terms will not be the same.\nThere are two applications presented, one to synthetic data in conventional triangular form, and another to real data.The secret of success in such an endeavor is the selection of the set of candidate basis functions for representation of the data set. Cross-validation is used for model selection.\nThe lasso performs well in modelling, identifying known features in the synthetic data, and tracking them accurately. This is despite complexity in those features that would challenge, and possibly defeat, most loss reserving alternatives. In the case of real data, the lasso also succeeds in tracking features of the data that analysis of the data set over many years has rendered virtually known.\nA later section of the paper discusses the prediction error associated with a lasso-based loss reserve. It is seen that the procedure can be readily adapted to the estimation of parameter and process error, but can also estimate one component of model error. To the authors knowledge, no other loss reserving model in the literature does so. \"\nSee my blog post for a tutorial on how to use the method described in this paper.\n","date":1535673600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535673600,"objectID":"a48c515796918888edcfec98a72808d7","permalink":"/publication/sagacious/","publishdate":"2018-08-31T00:00:00Z","relpermalink":"/publication/sagacious/","section":"publication","summary":"The lasso is applied in an attempt to automate the loss reserving problem. The regression form contained within the lasso is a GLM, and so that the model has all the versatility of that type of model, but the model selection is automated and the parameter coefficients for selected terms will not be the same.\nThere are two applications presented, one to synthetic data in conventional triangular form, and another to real data.","tags":["R","Lasso"],"title":"Self-assembling insurance claim models using regularized regression and machine learning","type":"publication"},{"authors":["Greg Taylor","Grainne McGuire"],"categories":null,"content":"\rThe purpose of the monograph is to provide access to generalized linear models for loss reserving but initially with strong emphasis on the chain ladder. The chain ladder is formulated in a GLM context, as is the statistical distribution of the loss reserve. This structure is then used to test the need for departure from the chain ladder model and to formulate any required model extensions.\nThe chain ladder is by far the most widely used method for loss reserving. The chain ladder algorithm itself is non-stochastic, but Mack (1993) defined a stochastic version of the model and showed how a mean square error of prediction may be associated with any loss reserve obtained from this model.\nThere are, however, two families of stochastic model which generate the chain ladder algorithm for the estimation of loss reserve, as discussed in Taylor (2011). They require differing treatments of for the estimation of mean square error of prediction. Both families of model may be formulated as generalized linear models. This is not widely appreciated of the Mack model. The monograph commences with the identification of these two families and their respective GLM formulations.\nGLM formulation naturally invites the use of a bootstrap to estimate prediction error. The bootstrap estimates the entire distribution of loss reserve rather than just the mean square error of prediction obtainable from Mack’s algorithm. The monograph discusses both parametric and semi-parametric forms of the GLM bootstrap.\nEmphasis is placed on the use of statistical software to implement the GLM formulation. This formulation and the associated software provide the diagnostics for testing the validity of the model. This aspect is covered by the existing literature but the monograph reviews this material in view of its importance.\nPractical applications of the chain ladder often depart from the strict model. There are a number of causes but prominent among these are:\n\rthe need to smooth the age-to-age factor tail;\rthe need to give greater weight to more recent data than to older.\r\rThese two matters are considered within the GLM context. The subject of smoothing leads to a discussion of generalized additive models.\nAs regards the second point, the GLM structure is used to test whether or not data are time-homogeneous (as is required by the strict chain ladder model) and, if not, to suggest a procedure for recognising and accommodating time-heterogeneity in the data. This may lead to the common practice of discarding all but the last m diagonals of the claim triangle, but more general approaches are also be considered.\nAs time-heterogeneity is not consistent with the chain ladder model, it amounts to model failure, and is recognizable from the diagnostics introduced above. Various forms of model failure are considered and, in each case, a model extension constructed to deal with it.\nFinally, extension to several models that go beyond the scope of generalized linear models is discussed.\nSee my blog post for some R code on how to fit the GLM described in the monograph.\n\rClick the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.\r\r\r\rClick the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.\r\r\rSupplementary notes can be added here, including [code and math](https://sourcethemes.com/academic/docs/writing-markdown-latex/).\r--\r","date":1462320000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1462320000,"objectID":"aeb8efa2bbf231fa81b2369e618002d8","permalink":"/publication/2016_monograph/","publishdate":"2016-05-04T00:00:00Z","relpermalink":"/publication/2016_monograph/","section":"publication","summary":"The purpose of the monograph is to provide access to generalized linear models for loss reserving but initially with strong emphasis on the chain ladder. The chain ladder is formulated in a GLM context, as is the statistical distribution of the loss reserve. This structure is then used to test the need for departure from the chain ladder model and to formulate any required model extensions.\nThe chain ladder is by far the most widely used method for loss reserving.","tags":["bootstrap","loss reserving","GLM"],"title":"Stochastic loss reserving using Generalized Linear Models","type":"publication"},{"authors":["Greg Taylor","Grainne McGuire","James Sullivan"],"categories":null,"content":"\rThis paper examines various forms of individual claim model for the purpose of loss reserving, with emphasis on the prediction error associated with the reserve. Each form of model is calibrated against a single extensive data set, and then used to generate a forecast of loss reserve and an estimate of its prediction error.\nThe basis of this is a model of the “paids” type, in which the sizes of strictly positive individual finalised claims are expressed in terms of a small number of covariates, most of which are in some way functions of time. Such models can be found in the literature.\nThe purpose of the current paper is to extend these to individual claim “incurreds” models. These are constructed by the inclusion of case estimates in the model’s conditioning information. This form of model is found to involve rather more complexity in its structure.\nFor the particular data set considered here, this did not yield any direct improvement in prediction error. However, a blending of the paids and incurreds models did so.\n","date":1220227200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1220227200,"objectID":"177a87574f91545aeb8a6e8952d8b240","permalink":"/publication/2008_bootstrap/","publishdate":"2008-09-01T00:00:00Z","relpermalink":"/publication/2008_bootstrap/","section":"publication","summary":"This paper examines various forms of individual claim model for the purpose of loss reserving, with emphasis on the prediction error associated with the reserve. Each form of model is calibrated against a single extensive data set, and then used to generate a forecast of loss reserve and an estimate of its prediction error.\nThe basis of this is a model of the “paids” type, in which the sizes of strictly positive individual finalised claims are expressed in terms of a small number of covariates, most of which are in some way functions of time.","tags":["case estimate","GLM","individual claim model","loss reserving","prediction error","statistical case estimation"],"title":"Individual claim loss reserving conditioned by case estimates","type":"publication"},{"authors":["Greg Taylor","Grainne McGuire"],"categories":null,"content":"\rThis paper provides a case study in the application of generalised linear models (GLMs) to loss reserving. The study is motivated by approaching the exercise from the viewpoint of an actuary with a predisposition to the application of the chain ladder (CL). The data set under study is seen to violate the conditions for application of the CL in a number of ways. The difficulties of adjusting the CL to allow for these features are noted (Section 3).\nRegression, and particularly GLM regression, is introduced as a structured and rigorous form of dat analysis. This enables the investigation and modelling of a number of complex features of the data responsible for the violation of the CL conditions. These include superimposed inflation and changes in the rules governing the payment of claims (Sections 4 to 7). The development of the analysis is traced in some detail, as is the production of a range of diagnostics and tests used to compare candidate models and validate the final one.\nThe benefits of this approach are dicussed in Section 8\"\n","date":1084665600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1084665600,"objectID":"7ff42f7fcaa8e94bdcfa480a0a837c2a","permalink":"/publication/2004_cas_glms/","publishdate":"2004-05-16T00:00:00Z","relpermalink":"/publication/2004_cas_glms/","section":"publication","summary":"This paper provides a case study in the application of generalised linear models (GLMs) to loss reserving. The study is motivated by approaching the exercise from the viewpoint of an actuary with a predisposition to the application of the chain ladder (CL). The data set under study is seen to violate the conditions for application of the CL in a number of ways. The difficulties of adjusting the CL to allow for these features are noted (Section 3).","tags":["chain ladder","generalised linear model","GLM","loss reserving","regression","superimposed inflation"],"title":"Loss reserving with GLMs: a case study","type":"publication"}]