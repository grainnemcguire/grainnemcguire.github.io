{
  "hash": "664d69b49d0daf745b394b6e9fb6b19a",
  "result": {
    "markdown": "---\ntitle: \"Traditional-style reserving using GLMs\"\nauthor: \"Grainne McGuire\"\ndate: '2019-11-07'\ndescription: \"This post provides a worked example in R of fitting a GLM to some non-life claims reserving data\"\ncategories: [\"GLM\", \"R\", \"Reserving\"]\nimage: \"heatmap.png\"\nresources: \n  - \"_traditional_style_reserving_glms.qmd\" \n  - \"_glms_meyersshi.csv\"\n---\n\n\n\n## April 2023 update\n\nThe article below is my original article working through fitting a GLM to aggregate triangular data using the methods and data from the CAS Monograph [Stochastic Loss Reserving using Generalized Linear Models](https://www.casact.org/monograph/cas-monograph-no-3).\n\nSince then some or all of the article has re-published with some changes at:\n\n- [Reserving with GLMs on the MLRWP blog](https://institute-and-faculty-of-actuaries.github.io/mlr-blog/post/foundations/r-glms/)\n- [Reserving with GLMs in Python on the MLRWP blog](https://institute-and-faculty-of-actuaries.github.io/mlr-blog/post/foundations/python-glms/)\n\n\n## Introduction\n\nThis post provides a worked example in R of fitting a GLM to some non-life claims reserving data. \nThe example and data are drawn from the CAS Monograph [Stochastic Loss Reserving using Generalized Linear Models](/publication/2016_monograph).\nHere we follow through the application of the cross-classified model from that monograph to the data (Chapter 3), and follow through with the additional work to firstly simplify the model and secondly to improve the model fit through the use of some interaction terms (Chapter 7).\n\n- The data used in this article is available [here](./_glms_meyersshi.csv)\n- You can download this notebook as a quarto file to run the code yourself from [here](./_traditional_style_reserving_glms.qmd)\n\n\n## Setup\n\nBefore we begin, we first set up the R session by loading in the various packages that we need.\n\n* [here](https://cran.rstudio.com/web/packages/here/index.html): I first heard about here from reading [Jenny Bryan's](https://github.com/jennybc/here_here) article on it and have been a fan of `here` and the R project structure ever since. It really helps with portability of code.\n    + Basically it allows you to use relative rather than absolute file paths.\n    + If you want to run this notebook and don't want to use `here` then all you need to do is put an appropriate pathname in for loading in the data from a CSV file.\n      Location is not used anywhere else.\n      \n* [data.table](https://github.com/Rdatatable/data.table) I really like `data.table` - its power, speed and terseness. At some point though I may replace the `data.table` code with base R to reduce dependencies. For now though, there isn't a huge amount of `data.table` code.\n    + Even if you don't like `data.table` syntax, the `fread` and `fwrite` functions can be very useful for reading and writing CSV files.\n\n* [ggplot2](https://ggplot2.tidyverse.org/): create nice graphs easily\n    + [viridis](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html) nice colour palettes that are tested for common forms of colour-blindness\n    + [cowplot](https://cran.r-project.org/web/packages/cowplot/index.html) - an easy way of grouping graphs into a single figure\n    + [patchwork]https://cran.r-project.org/web/packages/patchwork/index.html) - an easy way of grouping graphs into a single figure\n\n\n* [knitr](https://cran.r-project.org/web/packages/knitr/index.html) The notebook uses `kable` from the `knitr` package. If you're using RStudio to run this code in notebook format, then you should already have it. Otherwise you can install it, or you can simply replace all the `kable` commands with print statements.\n\nIf you don't have any of these packages you will need to install them via `install.packages` or, if using RStudio, via the Install buttom in the packages pane. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nlibrary(here)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(viridis)\nlibrary(patchwork)\n# I have elected not to attach knitr, so we need to use knitr::kable() below\n\noptions(scipen = 99)   # get rid of scientific notation\n\n# use this theme in all plots\nggplot2::theme_set(theme_classic())\n\n```\n:::\n\n\n\n\n## Data\n\nThe data are presented in Section 1.3 of the monograph. Ultimately the data were sourced from the Meyers and Shi (2011) database, and are the workers compensation triangle of the New Jersey Manufacturers Group.\n\nFor ease of use, I have created a CSV file with the data which is loaded in this code chunk. As noted above I use relative path names with the `here` package. If you don't want to have a setup that works with `here`, just ensure the full pathname to the file is included in the `fread` statement below.\n\nOnce the data is loaded in, have a look at the start of it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsdata <- data.table::fread(here::here(\"post/2019-11-07-traditional-style-reserving-using-glms/_glms_meyersshi.csv\"))\n# if needed replace here::here(\"data/glms_meyershi.csv\") with\n# the correct path and filename of where you put the data\n\nsetDT(msdata)\n\nprint(msdata[1:6,])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   acc_year dev_year cumulative incremental\n1:        1        1      41821       41821\n2:        1        2      76550       34729\n3:        1        3      96697       20147\n4:        1        4     112662       15965\n5:        1        5     123947       11285\n6:        1        6     129871        5924\n```\n:::\n:::\n\n\nSo we have four columns:\n\n* acc_year: accident year, numbered from 1 to 10\n\n* dev_year: development year, also numbered from 1 to 10\n\n* cumulative: cumulative payments to date\n\n* incremental: incremental payments for that accident year, development year combination.\n\n\n\nLet's look at the data visually.\n\nFirst we plot the cumulative amounts in each accident year\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=msdata, aes(x=dev_year, y=cumulative, colour=as.factor(acc_year))) +\n\tgeom_line(size=1) +\n\tscale_color_viridis_d(begin=0.9, end=0) + \n\tggtitle(\"Cumulative amounts by development year\") + \n\ttheme(legend.position = \"right\", legend.title=element_blank(), legend.text=element_text(size=8))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=768}\n:::\n:::\n\n\nNow look at the incremental amounts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=msdata, aes(x=dev_year, y=incremental, colour=as.factor(acc_year))) +\n\tgeom_line(size=1) +\n\tscale_color_viridis_d(begin=0.9, end=0) + \n\tggtitle(\"Incremental amounts by development year\") + \n\ttheme(legend.position = \"right\", legend.title=element_blank(), legend.text=element_text(size=8))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=768}\n:::\n:::\n\n\n\nThe data look quite well behaved - each year seems to have a similar development pattern.\n\n\n\n## Modelling\n\n### Initial model\n\nThe first model applied here is the Over-dispersed Poisson (ODP) cross classified (cc) model (Sections 3.3.2 and 3.3.3 of the monograph).\nThis model has been shown to give the same results as the chain ladder algorithm.\n\nTo apply the model, we will use the `glm` function from the base R `stats` package. The cross-classified model requires separate levels for each of accident and development year so we first make a factor version of these variates.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsdata[, acc_year_factor := as.factor(acc_year)\n\t   ][, dev_year_factor := as.factor(dev_year)\n\t     ][, cal_year := acc_year + dev_year - 1]\n```\n:::\n\n\n\nNow we fit the model and look at the results via `summary`.\n\n* The family is the *quasipoisson* - this is how we fit an ODP model with `glm`.\n* The link is log\n* The formula is simply \"incremental ~ 0 + acc_year_factor + dev_year_factor\"\n    + The 0 tells `glm` to fit a model without an intercept\n    + We choose to do that here because then we can more easily compare the results to those in the monograph.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglm_fit1 <- glm(data = msdata, \n\tfamily = quasipoisson(link = \"log\"),\n\tformula = \"incremental ~ 0 + acc_year_factor + dev_year_factor\")\n\n\nsummary(glm_fit1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nglm(formula = \"incremental ~ 0 + acc_year_factor + dev_year_factor\", \n    family = quasipoisson(link = \"log\"), data = msdata)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-21.493   -5.534    0.000    5.136   21.059  \n\nCoefficients:\n                  Estimate Std. Error t value             Pr(>|t|)    \nacc_year_factor1  10.65676    0.03164 336.794 < 0.0000000000000002 ***\nacc_year_factor2  10.79533    0.02994 360.507 < 0.0000000000000002 ***\nacc_year_factor3  10.89919    0.02887 377.465 < 0.0000000000000002 ***\nacc_year_factor4  10.98904    0.02808 391.326 < 0.0000000000000002 ***\nacc_year_factor5  11.03883    0.02783 396.654 < 0.0000000000000002 ***\nacc_year_factor6  11.01590    0.02855 385.867 < 0.0000000000000002 ***\nacc_year_factor7  11.00808    0.02945 373.734 < 0.0000000000000002 ***\nacc_year_factor8  10.89050    0.03266 333.463 < 0.0000000000000002 ***\nacc_year_factor9  10.83613    0.03669 295.348 < 0.0000000000000002 ***\nacc_year_factor10 10.69108    0.05104 209.454 < 0.0000000000000002 ***\ndev_year_factor2  -0.20466    0.02276  -8.993  0.00000000009767316 ***\ndev_year_factor3  -0.74741    0.02819 -26.512 < 0.0000000000000002 ***\ndev_year_factor4  -1.01667    0.03284 -30.954 < 0.0000000000000002 ***\ndev_year_factor5  -1.45160    0.04214 -34.446 < 0.0000000000000002 ***\ndev_year_factor6  -1.83254    0.05471 -33.495 < 0.0000000000000002 ***\ndev_year_factor7  -2.14026    0.07150 -29.933 < 0.0000000000000002 ***\ndev_year_factor8  -2.34827    0.09312 -25.218 < 0.0000000000000002 ***\ndev_year_factor9  -2.51317    0.12673 -19.831 < 0.0000000000000002 ***\ndev_year_factor10 -2.66449    0.19930 -13.369  0.00000000000000158 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for quasipoisson family taken to be 114.5364)\n\n    Null deviance: 27479374.2  on 55  degrees of freedom\nResidual deviance:     4128.1  on 36  degrees of freedom\nAIC: NA\n\nNumber of Fisher Scoring iterations: 3\n```\n:::\n:::\n\n\n\nWe now extract the coefficient table in a more convenient way and append it onto the `glm_fit1` object for later use.\n\nWe will also print the table again in a nicer form to make it easier to compare to the first 3 columns of Table 3-5 of the monograph.\n\n* If you do this, you should see that the results match.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# save the data for later use\nglm_fit1$coeff_table <- data.table(parameter = names(glm_fit1$coefficients), \n\t\t\t\t\t\t\t\t   coeff_glm_fit1 = glm_fit1$coefficients)\n\n# print out the table so we can compare against Table 3-5.\nglm_fit1$coeff_table |> \n\tknitr::kable(digits=c(0,3))\n```\n\n::: {.cell-output-display}\n|parameter         | coeff_glm_fit1|\n|:-----------------|--------------:|\n|acc_year_factor1  |         10.657|\n|acc_year_factor2  |         10.795|\n|acc_year_factor3  |         10.899|\n|acc_year_factor4  |         10.989|\n|acc_year_factor5  |         11.039|\n|acc_year_factor6  |         11.016|\n|acc_year_factor7  |         11.008|\n|acc_year_factor8  |         10.891|\n|acc_year_factor9  |         10.836|\n|acc_year_factor10 |         10.691|\n|dev_year_factor2  |         -0.205|\n|dev_year_factor3  |         -0.747|\n|dev_year_factor4  |         -1.017|\n|dev_year_factor5  |         -1.452|\n|dev_year_factor6  |         -1.833|\n|dev_year_factor7  |         -2.140|\n|dev_year_factor8  |         -2.348|\n|dev_year_factor9  |         -2.513|\n|dev_year_factor10 |         -2.664|\n:::\n:::\n\n\n\n### Loss reserve\n\n* We will calculate the loss reserve for this model\n* This should give the same answers as the chain ladder algorithm\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first make the lower triangle data set\nay <- NULL\ndy <- NULL\n\n\nfor(i in 2:10){\n\tay <- c(ay, rep(i, times=(i-1)))\n\tdy <- c(dy, (10-i+2):10)\n}\n\nfutdata <- data.table(acc_year = ay, dev_year = dy)\n\n# make factors\nfutdata[, cal_year := acc_year + dev_year\n\t\t][, acc_year_factor := as.factor(acc_year)\n\t\t  ][, dev_year_factor := as.factor(dev_year)]\n\n# make the prediction and sum by acc_year\nx <- predict(glm_fit1, newdata = futdata, type=\"response\")\nfutdata[, incremental := x]\n\n\nocl_year <- futdata[,  lapply(.SD, sum), .SDcols=c(\"incremental\"), by=\"acc_year\"]\n\nocl_year |> \n\tknitr::kable(digits=c(0, 0))\n```\n\n::: {.cell-output-display}\n| acc_year| incremental|\n|--------:|-----------:|\n|        2|        3398|\n|        3|        8155|\n|        4|       14579|\n|        5|       22645|\n|        6|       31865|\n|        7|       45753|\n|        8|       60093|\n|        9|       80983|\n|       10|      105874|\n:::\n:::\n\n\n* As expected, this matches the results in Table 3-2 of the monograph.\n\n\n\n### Model diagnostics\n\nIt's always important to check that a model fits the data well, so here we look at the following:\n\n* Residual Scatterplots\n   + by linear predictor\n   + by accident, development and calendar years\n   \n* Heat map of actual vs fitted\n   + In this we get the actual/fitted ratio in each (acc, dev) cell [subject to lower and upper bounds of (0.5, 2)] and then plot the colour-coded triangle of the actual/fitted values\n   + heat maps are helpful to check for model fit and may help to identify missing interactions.\n\n\n**Note on residuals with `glm`**\n\n* The residuals in a glm object accessed with `$residuals` are residuals used in the model fitting algorithm.\n* For diagnostic purposes, the standardised deviance residuals are usually preferable to work with.\n  + These are the signed square roots of the contribution of the i*th* observation to the deviance, divided by hat matrix values.\n  + The `stats::rstandard()` function may be used with glm objects to extract the standardised deviance residuals.\n\n<br><br>\n\n**Generating the diagnostics**\n\n* First we prepare the data by adding the fitted values and residuals. \n  +  Because this model has a lot of parameters, there are two observations where the fitted is exactly equal to the actual -- (acc_year=1, dev_year=10) and (acc_year=10, dev_year=0).\n  This is because these observations have a unique parameter.\n  + The deviance calculations below return NaN (not a number) for these points, but the residual should really be 0 so this adjustment is made manually. \n  \n* Also add actual/fitted ratios and the log of these (restricted to the range [log(0.5), log(2)]) - these will be used for a heatmap later. \n  + The restricted range is used to generate easier to read shadings in the heat-map, while the conversion to log means that the shading scales will be similar intensity for $x$% and $1/x$ % \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsdata[, residuals1 := rstandard(glm_fit1)\n\t   ][, fitted1 := glm_fit1$fitted.values\n\t     ][, linear_predictor1 := log(fitted1)\n\t       ][, AvsF1 := incremental / fitted1\n\t         ][, AvsF_restricted1 := log(pmax(0.5, pmin(2,AvsF1)))]\n\n# check for NaN residuals\nmsdata[is.nan(residuals1),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   acc_year dev_year cumulative incremental acc_year_factor dev_year_factor\n1:        1       10     144781        2958               1              10\n2:       10        1      43962       43962              10               1\n   cal_year residuals1 fitted1 linear_predictor1 AvsF1\n1:       10        NaN    2958          7.992269     1\n2:       10        NaN   43962         10.691081     1\n            AvsF_restricted1\n1: -0.0000000000000019984014\n2:  0.0000000000000008881784\n```\n:::\n\n```{.r .cell-code}\n# these occur where we expect them so so replace with 0\nmsdata[is.nan(residuals1), residuals1 := 0]\n```\n:::\n\n\nLook at the first 10 rows of msdata\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(msdata, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    acc_year dev_year cumulative incremental acc_year_factor dev_year_factor\n 1:        1        1      41821       41821               1               1\n 2:        1        2      76550       34729               1               2\n 3:        1        3      96697       20147               1               3\n 4:        1        4     112662       15965               1               4\n 5:        1        5     123947       11285               1               5\n 6:        1        6     129871        5924               1               6\n 7:        1        7     134646        4775               1               7\n 8:        1        8     138388        3742               1               8\n 9:        1        9     141823        3435               1               9\n10:        1       10     144781        2958               1              10\n    cal_year  residuals1   fitted1 linear_predictor1     AvsF1\n 1:        1 -0.37704981 42478.725         10.656759 0.9845164\n 2:        2  0.06821815 34616.808         10.452095 1.0032410\n 3:        3  0.02211088 20117.514          9.909346 1.0014657\n 4:        4  0.50192703 15368.757          9.640092 1.0387958\n 5:        5  1.36344235  9948.355          9.205163 1.1343584\n 6:        6 -1.13119533  6796.876          8.824218 0.8715769\n 7:        7 -0.33754581  4996.553          8.516503 0.9556589\n 8:        8 -0.56680264  4058.159          8.308485 0.9220929\n 9:        9 -0.01379476  3441.253          8.143591 0.9981829\n10:       10  0.00000000  2958.000          7.992269 1.0000000\n            AvsF_restricted1\n 1: -0.015604749951508145936\n 2:  0.003235741327323749146\n 3:  0.001464610789021573859\n 4:  0.038062125103388820546\n 5:  0.126067171138098593763\n 6: -0.137451186377785167236\n 7: -0.045354245283910396558\n 8: -0.081109303248732236846\n 9: -0.001818723883641001036\n10: -0.000000000000001998401\n```\n:::\n:::\n\n\n\nNow let's look at the residual scatterplots - here I use the `cowplot` package to combine all 4 graphs into one plot.\n\nIn the linear predictor scatterplot, the points are colour coded so that the lighter points belong to the earlier development years, and the darker points belong to the later ones.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- ggplot(data=msdata, aes(x=linear_predictor1, y=residuals1, colour=dev_year)) +\n\tgeom_point(size=2) +\n\tscale_colour_viridis(begin=0.9, end=0) +\n\ttheme(legend.position = \"none\") +\n\tggtitle(\"Linear predictor\")\n\n\np2 <- ggplot(data=msdata, aes(x=acc_year, y=residuals1)) +\n\tgeom_point(size=2, colour=\"#2d708eff\") +\n\tggtitle(\"Accident year\")\n\np3 <- ggplot(data=msdata, aes(x=dev_year, y=residuals1)) +\n\tgeom_point(size=2, colour=\"#2d708eff\") +\n\tggtitle(\"Development year\")\n\np4 <- ggplot(data=msdata, aes(x=cal_year, y=residuals1)) +\n\tgeom_point(size=2, colour=\"#2d708eff\") +\n\tggtitle(\"Calendar year\")\n\n# combine plots with patchwork\np <- (p1 + p2) / (p3 + p4)\n\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=864}\n:::\n:::\n\n\n\nNow construct and draw the heat map. Note that the colours are:\n\n* blue (A/F = 50%)\n* white (A/F = 100%)\n* red (A/F = 200%)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# heatmap code\n# to get the correct shading I've plotted the log of the restricted A/F values\n\np_hm <- ggplot(data=msdata, aes(x=dev_year, y=acc_year)) + \n\tgeom_tile(aes(fill = AvsF_restricted1))+scale_y_reverse()+\n\tscale_fill_gradient2(name=\"AvF_min\", low=\"royalblue\", mid=\"white\", high=\"red\", midpoint=0, space=\"Lab\", na.value=\"grey50\", guide=\"colourbar\")+\n\tlabs(x=\"Development year\", y=\"Accident year\")+\n\ttheme(legend.position = \"none\")+\n\ttheme(axis.title.x = element_text(size=8), axis.text.x  = element_text(size=7))+\n\ttheme(axis.title.y = element_text(size=8), axis.text.y  = element_text(size=7))+\n\ttheme(panel.background = element_rect(fill = \"grey\", colour = \"grey\", size = 2, linetype = \"solid\"),\n\t\t  panel.grid = element_line(colour=\"grey\")) + \n\tNULL\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nâ„¹ Please use the `linewidth` argument instead.\n```\n:::\n\n```{.r .cell-code}\nprint(p_hm)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n## Refining the model\n\nWe could stop here - and just use the results from this model, which match those produced by the chain ladder. The diagnostics suggest that the model fits quite well.\nHowever can we:\n\n* identify simplifications to the model to make it more parsinomious?\n* identify any areas of poorer fit than may suggest missing model terms including interactions?\n\n\n### Simplifying the model\n\nFirst we consider if we can use a parametric shape for the accident and development year parameters.\n\n\n### Accident year\n\nFirst plot the accident year parameters.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract the data\ndt_acc_year <- glm_fit1$coeff_table[grepl(\"acc_year\", parameter),  \n\t\t\t\t\t\t\t\t\t][, acc_year := as.integer(gsub(\"acc_year_factor\", \"\", parameter))]\n\n\n# plot\nggplot(data=dt_acc_year, aes(x=acc_year, y=coeff_glm_fit1)) +\n\tgeom_line(size=2, colour=\"#440154ff\") +\n\tgeom_point(size=4, colour=\"#440154ff\") + \n\tggtitle(\"Accident year parameters\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n* Note that their shape closely resembles that of a parabola.\n* This suggests that we can replace the 10 accident year parameters by\n    + the overall intercept\n    + an acc_year term\n    + an acc_year squarted term\n\n* So refit the model on this basis.\n    + Drop the 0 from the glm_fit1 formula to allow the model to have an intecept\n    + Replace the acc_year_factor term with the parabola terms.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add an x and x^2 term\nmsdata[, acc_year_2 := acc_year^2]\n\nglm_fit2 <- glm(data = msdata, \n\tfamily = quasipoisson(link = \"log\"),\n\tformula = \"incremental ~ acc_year + acc_year_2 + dev_year_factor\")\n\n\nsummary(glm_fit2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nglm(formula = \"incremental ~ acc_year + acc_year_2 + dev_year_factor\", \n    family = quasipoisson(link = \"log\"), data = msdata)\n\nDeviance Residuals: \n     Min        1Q    Median        3Q       Max  \n-28.5517   -5.1747    0.2691    4.5827   24.5421  \n\nCoefficients:\n                   Estimate Std. Error t value             Pr(>|t|)    \n(Intercept)       10.470978   0.034414 304.264 < 0.0000000000000002 ***\nacc_year           0.200075   0.014219  14.071 < 0.0000000000000002 ***\nacc_year_2        -0.017907   0.001356 -13.210 < 0.0000000000000002 ***\ndev_year_factor2  -0.205555   0.021276  -9.661     0.00000000000243 ***\ndev_year_factor3  -0.750108   0.026492 -28.314 < 0.0000000000000002 ***\ndev_year_factor4  -1.014806   0.030982 -32.755 < 0.0000000000000002 ***\ndev_year_factor5  -1.451958   0.039797 -36.484 < 0.0000000000000002 ***\ndev_year_factor6  -1.830488   0.051662 -35.432 < 0.0000000000000002 ***\ndev_year_factor7  -2.142154   0.067504 -31.734 < 0.0000000000000002 ***\ndev_year_factor8  -2.352674   0.087924 -26.758 < 0.0000000000000002 ***\ndev_year_factor9  -2.513722   0.119637 -21.011 < 0.0000000000000002 ***\ndev_year_factor10 -2.660878   0.187820 -14.167 < 0.0000000000000002 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for quasipoisson family taken to be 102.5776)\n\n    Null deviance: 750824  on 54  degrees of freedom\nResidual deviance:   4427  on 43  degrees of freedom\nAIC: NA\n\nNumber of Fisher Scoring iterations: 3\n```\n:::\n:::\n\n\nWe see in the coefficient table part of the summary that the two acc_year terms are highly significant.\n\n<br>\n\nNow extract the coefficients and compare the previous and current fits.\n\n* Remember that the intercept must be included in these calculations.\n* Again, save the coefficient table in this extracted form with the glm_fit2 object for later use.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract the coefficient table\nglm_fit2$coeff_table <- data.table(parameter = names(glm_fit2$coefficients), coeff_glm_fit2 = glm_fit2$coefficients)\nprint(glm_fit2$coeff_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            parameter coeff_glm_fit2\n 1:       (Intercept)    10.47097818\n 2:          acc_year     0.20007497\n 3:        acc_year_2    -0.01790686\n 4:  dev_year_factor2    -0.20555514\n 5:  dev_year_factor3    -0.75010823\n 6:  dev_year_factor4    -1.01480620\n 7:  dev_year_factor5    -1.45195754\n 8:  dev_year_factor6    -1.83048769\n 9:  dev_year_factor7    -2.14215388\n10:  dev_year_factor8    -2.35267361\n11:  dev_year_factor9    -2.51372160\n12: dev_year_factor10    -2.66087765\n```\n:::\n:::\n\n\n\nNow compare the past and current parameter estimates for accident year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pull out the acc year coefficinents only\ndt_acc_year[, coeff_glm_fit2 := glm_fit2$coeff_table[parameter == \"acc_year\", coeff_glm_fit2]*acc_year + \n\t\t\t\tglm_fit2$coeff_table[parameter == \"acc_year_2\", coeff_glm_fit2]*acc_year^2 + \n\t\t\t\tglm_fit2$coeff_table[parameter == \"(Intercept)\", coeff_glm_fit2]]\n\n# make long for ggplot\ndt_acc_year_plot <- melt(dt_acc_year, id.vars = \"acc_year\", measure.vars = c(\"coeff_glm_fit1\", \"coeff_glm_fit2\"), variable.name=\"model\", value = \"estimate\")\n\n# remove the coeff_ from the model names\ndt_acc_year_plot[, model := gsub(\"coeff_\", \"\", model, fixed=TRUE)]\n\nggplot(data=dt_acc_year_plot, aes(x=acc_year, y=estimate, colour=model)) +\n\tgeom_line(size=2) +\n\tgeom_point(size=4) +\n\tscale_colour_viridis_d(begin=0, end=0.5) + \n\tggtitle(\"Accident year parameters\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n* This looks very good - the fit is very similar, but we have 7 fewer parameters.\n\n\n### Development year\n\n* Now we do the same thing for development year\n* Note that the glm_fit2 model (and the glm_fit1 model too) do not have a parameter for dev_year = 1 as this is the base level.\n    + This means that the parameter is really 0, so we must remember to include this.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract the data\ndt_dev_year <- glm_fit2$coeff_table[grepl(\"dev_year\", parameter),  \n\t\t\t\t\t\t\t\t\t][, dev_year := as.integer(gsub(\"dev_year_factor\", \"\", parameter))][]   # known data.table printing bug\n\n# add year 1\ndt_dev_year <- rbind(dt_dev_year, data.table(parameter=\"dev_year_factor1\", coeff_glm_fit2=0, dev_year=1))\nsetorder(dt_dev_year, dev_year)\n\n\n# plot\nggplot(data=dt_dev_year, aes(x=dev_year, y=coeff_glm_fit2)) +\n\tgeom_line(size=2, colour=\"#440154ff\") +\n\tgeom_point(size=4, colour=\"#440154ff\") +\n\tggtitle(\"Development year parameters\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n* Looking at this plot, it appears that a straight line would fit quite well\n* This fit would be improved by allowing the straight line to bend (have a knot) at dev_year = 7\n    + So let's try this below\n    + note we actually fit dev_year - 1 rather than dev_year\n        - this means that the parameter estimate at dev_year = 1 is 0, just as it is in the glm_fit2 model, so it makes the results comparable\n        - if we fit dev_year, then the parameter estimate at dev_year=1 would be non-zero, so the two fits would be shifted relative to each other and we would need to adjust for that.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add dev-1 and dev-7 terms\nmsdata[, dev_year_m1 := dev_year - 1]\nmsdata[, dev_year_ge_7 := pmax(dev_year-7.5, 0)]\n\n# fit the model\nglm_fit3 <- glm(data = msdata, \n\tfamily = quasipoisson(link = \"log\"),\n\tformula = \"incremental ~ acc_year + acc_year_2 + dev_year_m1 + dev_year_ge_7\")\n\n# extract and save the coefficient table\nglm_fit3$coeff_table <- data.table(parameter = names(glm_fit3$coefficients), coeff_glm_fit3 = glm_fit3$coefficients)\n\n# display a summary of the model\nsummary(glm_fit3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nglm(formula = \"incremental ~ acc_year + acc_year_2 + dev_year_m1 + dev_year_ge_7\", \n    family = quasipoisson(link = \"log\"), data = msdata)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-25.301   -9.262   -2.080    5.893   42.841  \n\nCoefficients:\n               Estimate Std. Error t value             Pr(>|t|)    \n(Intercept)   10.509475   0.052096 201.734 < 0.0000000000000002 ***\nacc_year       0.204224   0.021608   9.451     0.00000000000104 ***\nacc_year_2    -0.018295   0.002058  -8.891     0.00000000000719 ***\ndev_year_m1   -0.364073   0.008845 -41.160 < 0.0000000000000002 ***\ndev_year_ge_7  0.238860   0.088426   2.701              0.00941 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for quasipoisson family taken to be 242.0614)\n\n    Null deviance: 750824  on 54  degrees of freedom\nResidual deviance:  11879  on 50  degrees of freedom\nAIC: NA\n\nNumber of Fisher Scoring iterations: 4\n```\n:::\n:::\n\n\n\n* Assuming the fit is satisfactory, our original model with 19 parmaeters has now been simplified to 5 parameters - much more parsimonious and robust.\n* Let's check the fit by dev_year to see.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get the dev_year fit under the new model and add to the data.table containing the factor level parameters\np1 <- glm_fit3$coeff_table[parameter == \"dev_year_m1\", coeff_glm_fit3]\np2 <- glm_fit3$coeff_table[parameter == \"dev_year_ge_7\", coeff_glm_fit3]\ndt_dev_year[, coeff_glm_fit3 := p1*(dev_year-1) + p2*pmax(0, dev_year-7.5) ]\n\n\n# make long for ggplot\ndt_dev_year_plot <- melt(dt_dev_year, id.vars = \"dev_year\", measure.vars = c(\"coeff_glm_fit2\", \"coeff_glm_fit3\"), variable.name=\"model\", value = \"estimate\")\n\n# remove the coeff_ from the model names\ndt_dev_year_plot[, model := gsub(\"coeff_\", \"\", model, fixed=TRUE)]\n\n\nggplot(data=dt_dev_year_plot, aes(x=dev_year, y=estimate, colour=model)) +\n\tgeom_line(size=2) +\n\tgeom_point(size=4) +\n\tscale_colour_viridis_d(begin=0, end=0.5) +\n\tggtitle(\"Accident year parameters\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n* This looks good.\n* However dev_year = 2 is a bit underfit in the latest model, so we can add something to improve this fit\n* So refit and replot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsdata[, dev_year_eq_2 := as.integer(dev_year == 2)]\n\nglm_fit4 <- glm(data = msdata, \n\tfamily = quasipoisson(link = \"log\"),\n\tformula = \"incremental ~ acc_year + acc_year_2 + dev_year_m1 + dev_year_ge_7 + dev_year_eq_2\")\n\n\nglm_fit4$coeff_table <- data.table(parameter = names(glm_fit4$coefficients), coeff_glm_fit4 = glm_fit4$coefficients)\n\n\np1 <- glm_fit4$coeff_table[parameter == \"dev_year_m1\", coeff_glm_fit4]\np2 <- glm_fit4$coeff_table[parameter == \"dev_year_ge_7\", coeff_glm_fit4]\np3 <- glm_fit4$coeff_table[parameter == \"dev_year_eq_2\", coeff_glm_fit4]\ndt_dev_year[, coeff_glm_fit4 := p1*(dev_year-1) + p2*pmax(0, dev_year-7.5) + p3*(dev_year == 2) ]\n\n\n# make long for ggplot\ndt_dev_year_plot <- melt(dt_dev_year, id.vars = \"dev_year\", measure.vars = c(\"coeff_glm_fit2\", \"coeff_glm_fit4\"), variable.name=\"model\", value = \"estimate\")\n\n# remove the coeff_ from the model names\ndt_dev_year_plot[, model := gsub(\"coeff_\", \"\", model, fixed=TRUE)]\n\n\nggplot(data=dt_dev_year_plot, aes(x=dev_year, y=estimate, colour=model)) +\n\tgeom_line(size=2) +\n\tgeom_point(size=4) +\n\tscale_colour_viridis_d(begin=0, end=0.5) +\n\tggtitle(\"Accident year parameters\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n* Looks good!\n\n\n### Identifying missing structure\n\n* The second part of the model refining process involves checking for missing structure.\n* Let's have a better look at the heat map.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsdata[, residuals4 := rstandard(glm_fit4)\n\t   ][, fitted4 := glm_fit4$fitted.values\n\t     ][, linear_predictor4 := log(fitted4)\n\t       ][, AvsF4 := incremental / fitted4\n\t         ][, AvsF_restricted4 := log(pmax(0.5, pmin(2,AvsF4)))]\n\n\np_hm <- ggplot(data=msdata, aes(x=dev_year, y=acc_year)) + \n\tgeom_tile(aes(fill = AvsF_restricted4))+scale_y_reverse()+\n\tscale_fill_gradient2(name=\"AvF_min\", low=\"royalblue\", mid=\"white\", high=\"red\", midpoint=0, space=\"Lab\", na.value=\"grey50\", guide=\"colourbar\")+\n\tlabs(x=\"Development year\", y=\"Accident year\")+\n\ttheme(legend.position = \"none\")+\n\ttheme(axis.title.x = element_text(size=8), axis.text.x  = element_text(size=7))+\n\ttheme(axis.title.y = element_text(size=8), axis.text.y  = element_text(size=7))+\n\ttheme(panel.background = element_rect(fill = \"grey\", colour = \"grey\", size = 2, linetype = \"solid\"),\n\t\t  panel.grid = element_line(colour=\"grey\")) + \n\tNULL\n\nprint(p_hm)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\nLet's look at the heatmap again, with some annotations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_hm + \n\tannotate(geom=\"rect\", xmin= 0.5, xmax=1.5, ymin=0.5, ymax=6.5, colour=\"darkblue\", alpha=0.1, size=1.5) +\n\tannotate(geom=\"rect\", xmin= 0.5, xmax=1.5, ymin=6.5, ymax=10.5, colour=\"darkred\", alpha=0.1, size=1.5) +\n\tannotate(geom=\"rect\", xmin= 1.5, xmax=2.5, ymin=0.5, ymax=6.5, colour=\"darkred\", alpha=0.1, size=1.5) +\n\tannotate(geom=\"rect\", xmin= 1.5, xmax=2.5, ymin=6.5, ymax=9.5, colour=\"darkblue\", alpha=0.1, size=1.5) +\n\tannotate(geom=\"segment\", x=3, xend=3, y=1, yend=8, arrow=arrow(), colour=\"darkblue\", size=2) +\n\tannotate(geom=\"rect\", xmin= 3.5, xmax=4.5, ymin=0.5, ymax=7.5, colour=\"darkred\", alpha=0.1, size=1.5) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\nWe see:\n\n* development year 1, a distinct area of blue in the earlier accident years (A < F), followed by red (A > F)\n* development year 2, a distinct area of red in the earlier accident years (A > F), followed by blue (A < F)\n* development year 3, a possible progression from red to blue with increasing accident year (F increasing relative to A)\n* development year 4, nearly all red (A > F)\n\nThis suggests the payment pattern has altered and can be accommodated by (mostly) interaction terms within the GLM. Consider adding the following terms:\n\n* (development year = 1) * (accident year is between 1 and 6)\n* (development year = 2) * (accident year is between 1 and 6)\n* (development year = 3) * (accident year linear trend)\n* (development year = 4) \n\n\nSo, let's refit the model with terms to capture these and have a look at the heat map again\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add the new terms\nmsdata[, dev_year_eq_1 := as.integer(dev_year == 1)]\nmsdata[, dev_year_eq_3 := as.integer(dev_year == 3)]\nmsdata[, dev_year_eq_4 := as.integer(dev_year == 4)]\nmsdata[, acc_year_1_6 := as.integer(acc_year >= 1 & acc_year <= 6)]\n\n\nglm_fit5 <- glm(data = msdata, \n\tfamily = quasipoisson(link = \"log\"),\n\tformula = \"incremental ~ acc_year + acc_year_2 + dev_year_m1 + dev_year_ge_7 + dev_year_eq_2 + dev_year_eq_4 +\n\tdev_year_eq_1:acc_year_1_6 +  dev_year_eq_2:acc_year_1_6 + dev_year_eq_3:acc_year \")\n\n\n\nglm_fit5$coeff_table <- data.table(parameter = names(glm_fit5$coefficients), coeff_glm_fit5 = glm_fit5$coefficients)\n\n# print the coefficient table\n\nglm_fit5$coeff_table |> \n\tknitr::kable(digits=c(0, 4))\n```\n\n::: {.cell-output-display}\n|parameter                  | coeff_glm_fit5|\n|:--------------------------|--------------:|\n|(Intercept)                |        10.4904|\n|acc_year                   |         0.2066|\n|acc_year_2                 |        -0.0183|\n|dev_year_m1                |        -0.3685|\n|dev_year_ge_7              |         0.2720|\n|dev_year_eq_2              |         0.0375|\n|dev_year_eq_4              |         0.0528|\n|dev_year_eq_1:acc_year_1_6 |        -0.0671|\n|dev_year_eq_2:acc_year_1_6 |         0.1273|\n|acc_year:dev_year_eq_3     |        -0.0113|\n:::\n:::\n\n\n\n* This model should match that displayed in Table 7-5 of the monograph - and indeed it does (some very minor differences in parameter values - the model in the monograph was fitted in SAS).\n\n* Look at the heat map again with annotations - has the model resolved the identified issues?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# attach fitteds and residuals\nmsdata[, residuals5 := rstandard(glm_fit5)\n\t   ][, fitted5 := glm_fit5$fitted.values\n\t     ][, linear_predictor5 := log(fitted5)\n\t       ][, AvsF5 := incremental / fitted5\n\t         ][, AvsF_restricted5 := log(pmax(0.5, pmin(2,AvsF5)))]\n\n\n\np_hm <- ggplot(data=msdata, aes(x=dev_year, y=acc_year)) + \n\tgeom_tile(aes(fill = AvsF_restricted5))+scale_y_reverse()+\n\tscale_fill_gradient2(name=\"AvF_min\", low=\"royalblue\", mid=\"white\", high=\"red\", midpoint=0, space=\"Lab\", na.value=\"grey50\", guide=\"colourbar\")+\n\tlabs(x=\"Development year\", y=\"Accident year\")+\n\ttheme(legend.position = \"none\")+\n\ttheme(axis.title.x = element_text(size=8), axis.text.x  = element_text(size=7))+\n\ttheme(axis.title.y = element_text(size=8), axis.text.y  = element_text(size=7))+\n\ttheme(panel.background = element_rect(fill = \"grey\", colour = \"grey\", size = 2, linetype = \"solid\"),\n\t\t  panel.grid = element_line(colour=\"grey\")) + \n\tannotate(geom=\"rect\", xmin= 0.5, xmax=1.5, ymin=0.5, ymax=6.5, colour=\"darkblue\", alpha=0.1, size=1.5) +\n\tannotate(geom=\"rect\", xmin= 0.5, xmax=1.5, ymin=6.5, ymax=10.5, colour=\"darkred\", alpha=0.1, size=1.5) +\n\tannotate(geom=\"rect\", xmin= 1.5, xmax=2.5, ymin=0.5, ymax=6.5, colour=\"darkred\", alpha=0.1, size=1.5) +\n\tannotate(geom=\"rect\", xmin= 1.5, xmax=2.5, ymin=6.5, ymax=9.5, colour=\"darkblue\", alpha=0.1, size=1.5) +\n\tannotate(geom=\"segment\", x=3, xend=3, y=1, yend=8, arrow=arrow(), colour=\"darkblue\", size=2) +\n\tannotate(geom=\"rect\", xmin= 3.5, xmax=4.5, ymin=0.5, ymax=7.5, colour=\"darkred\", alpha=0.1, size=1.5) \n\n\nprint(p_hm)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n* This looks much better.\n\n* We should also look at the residual plots again\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- ggplot(data=msdata, aes(x=linear_predictor5, y=residuals5, colour=dev_year)) +\n\tgeom_point(size=2) +\n\tscale_colour_viridis(begin=0.9, end=0) +\n\ttheme_bw() + \n\ttheme(legend.position = \"none\") +\n\tggtitle(\"Linear predictor\")\n\n\np2 <- ggplot(data=msdata, aes(x=acc_year, y=residuals5)) +\n\tgeom_point(size=2, colour=\"#2d708eff\") +\n\ttheme_bw() + \n\tggtitle(\"Accident year\")\n\np3 <- ggplot(data=msdata, aes(x=dev_year, y=residuals5)) +\n\tgeom_point(size=2, colour=\"#2d708eff\") +\n\ttheme_bw() + \n\tggtitle(\"Development year\")\n\np4 <- ggplot(data=msdata, aes(x=cal_year, y=residuals5)) +\n\tgeom_point(size=2, colour=\"#2d708eff\") +\n\ttheme_bw() + \n\tggtitle(\"Calendar year\")\n\np <- (p1 + p2) / (p3 + p4)\n\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=864}\n:::\n:::\n\n\n\n\n## Loss reserve\n\n* Now that we have a model, let's produce the estimate of the outstanding claims by accident year and in total.\n    + Take the lower triangle data [futdata] created above\n    + Add on the new variates we created\n    + Score the model on this data\n    + Summarise the results\n\n<br>\nCreate the data and score using `predict`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add all model variates\nfutdata[, acc_year_2 := acc_year^2\n\t\t][, dev_year_m1 := dev_year - 1\n\t\t  ][, dev_year_ge_7 := pmax(0, dev_year - 7.5)\n\t\t    ][, dev_year_eq_1 := as.integer(dev_year == 1)\n\t\t      ][, dev_year_eq_2 := as.integer(dev_year == 2)\n\t\t        ][, dev_year_eq_3 := as.integer(dev_year == 3)\n\t\t          ][, dev_year_eq_4 := as.integer(dev_year == 4)\n\t\t            ][, acc_year_1_6 := as.integer(acc_year>=1 & acc_year <=6)]\n\n\nx <- predict(glm_fit5, newdata = futdata, type=\"response\")\nfutdata[, incremental := x]\n\nhead(futdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   acc_year dev_year cal_year acc_year_factor dev_year_factor incremental\n1:        2       10       12               2              10    3618.769\n2:        3        9       12               3               9    4470.907\n3:        3       10       13               3              10    4059.635\n4:        4        8       12               4               8    5324.841\n5:        4        9       13               4               9    4835.016\n6:        4       10       14               4              10    4390.250\n   acc_year_2 dev_year_m1 dev_year_ge_7 dev_year_eq_1 dev_year_eq_2\n1:          4           9           2.5             0             0\n2:          9           8           1.5             0             0\n3:          9           9           2.5             0             0\n4:         16           7           0.5             0             0\n5:         16           8           1.5             0             0\n6:         16           9           2.5             0             0\n   dev_year_eq_3 dev_year_eq_4 acc_year_1_6\n1:             0             0            1\n2:             0             0            1\n3:             0             0            1\n4:             0             0            1\n5:             0             0            1\n6:             0             0            1\n```\n:::\n:::\n\n\n\nGet reserves by accident year and in total \n\n\n::: {.cell}\n\n```{.r .cell-code}\nocl_year <- futdata[,  lapply(.SD, sum), .SDcols=c(\"incremental\"), by=\"acc_year\"]\nocl_total <- ocl_year[, sum(incremental)]\n\n\nocl_year |> \n\tknitr::kable(digits=c(0, 0))\n```\n\n::: {.cell-output-display}\n| acc_year| incremental|\n|--------:|-----------:|\n|        2|        3619|\n|        3|        8531|\n|        4|       14550|\n|        5|       22173|\n|        6|       32458|\n|        7|       45695|\n|        8|       62955|\n|        9|       79301|\n|       10|      101212|\n:::\n:::\n\n\n\nThe total reserve is\n\n\n::: {.cell}\n\n```{.r .cell-code}\nocl_total |> round(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 370493\n```\n:::\n:::\n\n\n\n* These results are similar, though not identical, to the results given in Table 7-6 of the monograph.\n* This is because the *forecast* column of the monograph contains bootstrapped means rather than the model mean.\n\n\n## Conclusion\n\nThe aim of this article has been to demonstrate fitting a GLM to a loss reserve following the example used in the CAS monograph.\nWe started with the chain ladder equivalent - the cross classified model with an over-dispersed Poisson distribution, then first simplified it and second, extended it to include some interactions.\nWe also cover how to create some of the plots discussed in the monograph in R, in particular residual scatter plots and the heat maps.\n\n\n\n## Session information\n\nTo assist with reproducibility, here are details of my R session.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.3 (2023-03-15 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\nlocale:\n[1] LC_COLLATE=English_Australia.utf8  LC_CTYPE=English_Australia.utf8   \n[3] LC_MONETARY=English_Australia.utf8 LC_NUMERIC=C                      \n[5] LC_TIME=English_Australia.utf8    \n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] patchwork_1.1.2   viridis_0.6.2     viridisLite_0.4.1 ggplot2_3.4.2    \n[5] data.table_1.14.8 here_1.0.1       \n\nloaded via a namespace (and not attached):\n [1] knitr_1.42        magrittr_2.0.3    munsell_0.5.0     colorspace_2.1-0 \n [5] R6_2.5.1          rlang_1.1.1       fastmap_1.1.1     fansi_1.0.4      \n [9] tools_4.2.3       grid_4.2.3        gtable_0.3.3      xfun_0.39        \n[13] utf8_1.2.3        cli_3.6.1         withr_2.5.0       htmltools_0.5.5  \n[17] yaml_2.3.7        rprojroot_2.0.3   digest_0.6.31     tibble_3.2.1     \n[21] lifecycle_1.0.3   gridExtra_2.3     farver_2.1.1      htmlwidgets_1.6.2\n[25] vctrs_0.6.2       glue_1.6.2        evaluate_0.20     rmarkdown_2.21   \n[29] labeling_0.4.2    pillar_1.9.0      compiler_4.2.3    scales_1.2.1     \n[33] jsonlite_1.8.4    renv_0.17.3       pkgconfig_2.0.3  \n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}